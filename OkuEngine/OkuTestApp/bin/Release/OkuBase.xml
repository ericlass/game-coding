<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OkuBase</name>
    </assembly>
    <members>
        <member name="T:OkuBase.Audio.Sound">
            <summary>
            Contains a wave form including some information about the format and the sample data itself.
            </summary>
        </member>
        <member name="T:OkuBase.Audio.WaveLoader">
            <summary>
            Can be used to load RIFF WAVE files (*.wav). At the moment only PCM (uncompressed) wave files
            with 16bit samples are supported. The number of channels and the sample rate can be choosen freely.
            </summary>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.LoadWave(System.String)">
            <summary>
            Loads a RIFF WAVE from the given file.
            </summary>
            <param name="filename">The path to a wave file.</param>
            <returns>The loaded wave form or null if an error occurred.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.LoadWave(System.IO.Stream)">
            <summary>
            Loads a RIFF WAVE from the given stream.
            </summary>
            <param name="stream">The stream that contains the wave file.</param>
            <returns>The loaded wave form or null if an error occurred.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadRiffHeader(System.IO.BinaryReader)">
            <summary>
            Reads the header of a riff wave file using the given BinaryReader.
            </summary>
            <param name="reader">A binary reader with a riff wave base stream.</param>
            <returns>The size of the riff wave or 0 if the given stream is not a riff wave.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.FindString(System.IO.BinaryReader,System.String)">
            <summary>
            Finds the given string in the given binary reader. If the string was found the stream
            pointer points to the first byte after the string. The search is started at the
            current position in the stream.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="str">The string to find.</param>
            <returns>True if the string was found, else False.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadFormatChunk(System.IO.BinaryReader,OkuBase.Audio.Sound)">
            <summary>
            Reads the format chunk of a riff wave that is given in reader. 
            If the format chunk was read successfully the format information
            are stored in the given wave.
            </summary>
            <param name="reader">The reader to read the format chunk from.</param>
            <param name="wave">The wave form to put the format information into.</param>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadChannelData(System.IO.BinaryReader,OkuBase.Audio.Sound)">
            <summary>
            Reads the channel sample data from a riff wave in the given reader.
            The channel data is returned in the ChannelData property of the wave
            parameter. This parameter has to be passed to the ReadFormatChunk
            method before, so the NumChannels property is setup correctly.
            </summary>
            <param name="reader">The BinaryReader used to the channel data.</param>
            <param name="wave">The wave form that will be filled with the channel data.</param>
            <returns>True if the channel data has been loaded successfully, else False.</returns>
        </member>
        <member name="T:OkuBase.Collections.DynamicArray`1">
            <summary>
            Provides a virtual dynamic array. The internal array is resized intelligently.
            </summary>
            <typeparam name="T">The type of data to be stored.</typeparam>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor">
            <summary>
            Create a new dynamic array with the default length of 10.
            </summary>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new dynamic array with the given length.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor(`0[])">
            <summary>
            Creates a new dynamic array using the given data array.
            In fact, the given array is cloned.
            </summary>
            <param name="data">The inital data array.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.ResizeArray(System.Int32)">
            <summary>
            Resizes the internal array to the given new size.
            </summary>
            <param name="newSize">The new size of the array.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.GetNextSize(System.Int32)">
            <summary>
            Calculates the next size for the internal array based on the given size.
            </summary>
            <param name="size">The current size of the array.</param>
            <returns>The new size for the array.</returns>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.AsureCapacity(System.Int32)">
            <summary>
            Makes sure that at least the ginven number of entries fits in to the internal array.
            </summary>
            <param name="capacity">The number of entries the internal array should at least contain.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Clear">
            <summary>
            Clear the dynamic array.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Capacity">
            <summary>
            Gets or sets the current size of the internal array. Note that settings the capacity
            trigger resizing the internal which really creates a new one.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Count">
            <summary>
            The current number of entries in this dynamic array.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.InternalArray">
            <summary>
            Gets the interal array. Please make sure to not store any references to it, as the
            array might be recreated if it has to be resized. Any references to it would then
            lead to a memory leak.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index.
            </summary>
            <param name="index">The index of the value.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Add(`0)">
            <summary>
            Adds the given item to the end of the list.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.AddRange(`0[])">
            <summary>
            Adds the given array of items to the end of the list.
            </summary>
            <param name="items">The items to be added.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Delete(System.Int32)">
            <summary>
            Deletes the item at the given index from the list.
            </summary>
            <param name="index">The index of the item to delete.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Insert(`0,System.Int32)">
            <summary>
            Insert the given item at the given index.
            Existing items at indexes >= index are moved to make
            place for the new item.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="index">The index to insert the item add.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.GetCollapsedArray">
            <summary>
            Gets a new array that is exactly Count items long.
            </summary>
            <returns>A new array that is exactly Count items long.</returns>
        </member>
        <member name="P:OkuBase.Driver.IAudioDriver.Volume">
            <summary>
            Gets or set the global volume of playback in the range 0.0...1.0.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Initialize(OkuBase.Settings.AudioSettings)">
            <summary>
            Initializes the sound engine.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Update(System.Single)">
            <summary>
            Updates the sounds that are currently played.
            </summary>
            <param name="dt">The time passed since the last update.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Finish">
            <summary>
            Frees all resources used by the sound engine.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Play(OkuBase.Audio.Source)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="source">The source to be played.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Pause(OkuBase.Audio.Source)">
            <summary>
            Pauses the given sound.
            </summary>
            <param name="source">The source to be paused.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Stop(OkuBase.Audio.Source)">
            <summary>
            Stops the given sound.
            </summary>
            <param name="source">The source to be stopped.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.LoadSource(OkuBase.Audio.Source)">
            <summary>
            Initializes the given source.
            </summary>
            <param name="source">The source to be initialized.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.UpdateSource(OkuBase.Audio.Source)">
            <summary>
            Updates an existing sources properties. Does not update the underlying sound.
            </summary>
            <param name="source">The source to be updated.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.ReleaseSource(OkuBase.Audio.Source)">
            <summary>
            Releases the given source. It cannot be played afterwards.
            </summary>
            <param name="source">The source to be released.</param>
        </member>
        <member name="T:OkuBase.Driver.DriverManager">
            <summary>
            Manages loading of drivers from assemblies that must be stored 
            in the same path as the executing assembly (usualy the .exe file).
            Only one driver of each type can be loaded at a time.
            </summary>
        </member>
        <member name="T:OkuBase.Driver.IGraphicsDriver">
            <summary>
            Defines the interface for a graphics driver.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Mesh">
            <summary>
            Defines a mesh with vertices and an optional texture.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.#ctor">
            <summary>
            Creates a new mesh with no data.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.#ctor(OkuBase.Geometry.Vertices,OkuBase.Graphics.ImageBase,OkuBase.Graphics.PrimitiveType)">
            <summary>
            Creates a new image with the given data.
            </summary>
            <param name="vertices">The vertices of the mesh.</param>
            <param name="texture">The texture to use for the mesh (can be null).</param>
            <param name="type">The type of primitives to form from the vertices.</param>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.Vertices">
            <summary>
            Gets or sets the vertices of the mesh.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.Texture">
            <summary>
            Gets or sets the texture of the mesh.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.PrimitiveType">
            <summary>
            Gets or sets the type of primitive that the vertices form for drawing.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.ForImage(OkuBase.Graphics.ImageBase,OkuBase.Graphics.Color)">
            <summary>
            Creates a mesh that renders the given image with the given tint color in original size.
            </summary>
            <param name="image">The image to be used.</param>
            <param name="tint">The tint color.</param>
            <returns>The generated mesh.</returns>
        </member>
        <member name="T:OkuBase.Geometry.Rectangle2f">
            <summary>
            Defines an axis alligned box by its min and max vectors.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Rectangle2f.Min">
            <summary>
            The min vector.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Rectangle2f.Max">
            <summary>
            The max vector.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.#ctor(OkuMath.Vector2f,OkuMath.Vector2f)">
            <summary>
            Create a new quad with the given vectors.
            </summary>
            <param name="min">The min vector.</param>
            <param name="max">The max vector.</param>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new quad with the given values.
            </summary>
            <param name="left">The left border of the quad.</param>
            <param name="right">The right border of the quad.</param>
            <param name="top">The top border of the quad.</param>
            <param name="bottom">The bottom border of the quad.</param>
        </member>
        <member name="P:OkuBase.Geometry.Rectangle2f.Width">
            <summary>
            Gets the width of the quad.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Rectangle2f.Height">
            <summary>
            Gets the height of the quad.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints">
            <summary>
            Gets the four corner points of the AABB as a vector array.
            </summary>
            <returns>The four corner points in an array.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints(OkuMath.Vector2f[])">
            <summary>
            Returns the corner points of the bounding box in the given array
            which must have a length >= 4. Only the first four entries (0-3) are filled.
            </summary>
            <param name="points">The array to put in the points.</param>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.Add(OkuBase.Geometry.Rectangle2f)">
            <summary>
            Calculates a bounding box that contains
            both this and the given AABB.
            </summary>
            <param name="other">The bounding box to add.</param>
            <returns>A new AABB that contains this and the given AABB.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.Split(System.Int32,System.Int32)">
            <summary>
            Splits the AABB into the given amount of vertical and horizontal cells.
            </summary>
            <param name="vertical">The number of vertical cells.</param>
            <param name="horizontal">The number of horizontal cells.</param>
            <returns>An array containing the split AABBs in the order from left-bottom to right top.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints(OkuMath.Vector2f,OkuMath.Vector2f)">
            <summary>
            Gets the four corner points of the AABB as a vector array.
            </summary>
            <param name="min">The minimum vector of the AABB.</param>
            <param name="max">The maximum vector of the AABB.</param>
            <returns>The four corner points in an array.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.ToString">
            <summary>
            Converts the AABB to string in the format "minX,minY;maxX,maxY".
            </summary>
            <returns>The AABB as a string in the format "minX,minY;maxX,maxY".</returns>
        </member>
        <member name="T:OkuBase.Geometry.Vertex">
            <summary>
            Defines a single vertex for use with a vertex buffer.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.TX">
            <summary>
            The x component of the texture coordinates.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.TY">
            <summary>
            The y component of the texture coordinates.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.B">
            <summary>
            The blue value of the color.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.G">
            <summary>
            The green value of the color.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.R">
            <summary>
            The red value of the color.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.A">
            <summary>
            The alpha value of the color.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.VX">
            <summary>
            The x component of the position.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.VY">
            <summary>
            The y component of the position.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vertex.Reserved">
            <summary>
            Reserved. Should always be zero.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vertex.#ctor(System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new vertex with the given vertex data.
            </summary>
            <param name="vx">The x component of the position.</param>
            <param name="vy">The y component of the position.</param>
            <param name="tx">The x component of the texture coordinates</param>
            <param name="ty">The y component of the texture coordinates</param>
            <param name="r">The red value of the color</param>
            <param name="g">The green value of the color</param>
            <param name="b">The blue value of the color</param>
            <param name="a">The alpha value of the color</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertex.#ctor(OkuMath.Vector2f,OkuMath.Vector2f,OkuBase.Graphics.Color)">
            <summary>
            Creates a new vertex from the given values.
            </summary>
            <param name="pos">The positions of the vertex.</param>
            <param name="tex">The texture coordinates.</param>
            <param name="col">The color.</param>
        </member>
        <member name="T:OkuBase.Geometry.VertexBuffer">
            <summary>
            Defines a vertex buffer which can be used to draw static
            meshes with maximum performance. The vertices will be stored
            in graphics card memory (most likely).
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.VertexBuffer.#ctor">
            <summary>
            Creates a new, empty vertex buffer.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.VertexBuffer.#ctor(OkuBase.Geometry.Vertex[])">
            <summary>
            Creates a new verex buffer with the given vertices.
            </summary>
            <param name="vertices">The vertices of the vertex buffer.</param>
        </member>
        <member name="P:OkuBase.Geometry.VertexBuffer.Id">
            <summary>
            Gets the id of the vertex buffer.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.VertexBuffer.Vertices">
            <summary>
            Gets or sets the vertices assigned to the vertex buffer.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Vertices">
            <summary>
            Contains different data about a set of vertices.
            The vertices are expressed by three separate array,
            one for each the vertex positions, texture coordinates and colors.
            The texture coordinates and colors may be set to null if not needed.
            The arrays are expected, but not forced, to be the same length.
            Use the Valid property to check if all non-null arrays have the same length. 
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor">
            <summary>
            Creates a new vertex content with no data.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuMath.Vector2f[])">
            <summary>
            Creates a new vertex content with the given positions.
            </summary>
            <param name="positions">The vertex positions.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuMath.Vector2f[],OkuMath.Vector2f[])">
            <summary>
            Creates a new vertex content with the given positions and texture coordinates.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="texCoords">The vertex texture coordinates.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuMath.Vector2f[],OkuBase.Graphics.Color[])">
            <summary>
            Creates a new vertex content with the given positions and color.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="colors">The vertex colors.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuMath.Vector2f[],OkuMath.Vector2f[],OkuBase.Graphics.Color[])">
            <summary>
            Creates a new vertex content with the given positions, texture coordinates and colors.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="texCoords">The vertex texture coordinates.</param>
            <param name="colors">The vertex colors.</param>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Positions">
            <summary>
            Gets or set the array of positions of the vertices.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.TexCoords">
            <summary>
            Gets or set the array of texture coordinates of the vertices.
            Can be set to null if not needed.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Colors">
            <summary>
            Gets or set the array of colors of the vertices.
            Can be set to null if not needed.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Count">
            <summary>
            Gets the number of vertices.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Valid">
            <summary>
            Gets if the vertex content is valid.
            It is valid if the Positions array is not null and
            all non-null arrays have the same length.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.Color">
            <summary>
            Stores a color value in RGBA format.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new opaque color with the given color values.
            </summary>
            <param name="red">The red amount of the color.</param>
            <param name="green">The green amount of the color.</param>
            <param name="blue">The blue amount of the color.</param>
        </member>
        <member name="M:OkuBase.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color with the given color values and alpha value.
            </summary>
            <param name="red">The red amount of the color.</param>
            <param name="green">The green amount of the color.</param>
            <param name="blue">The blue amount of the color.</param>
            <param name="alpha">The alpha transparency where 0 means completely transparent and 1 means opaque.</param>
        </member>
        <member name="M:OkuBase.Graphics.Color.Equals(OkuBase.Graphics.Color)">
            <summary>
            Compares this color with the given color.
            </summary>
            <param name="other">The color to compare with.</param>
            <returns>True if the two colors R, G, B and A values are equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.EqualsColor(OkuBase.Graphics.Color)">
            <summary>
            Compares this color with the given one without checking the Alpha component.
            </summary>
            <param name="other">The color to compare with.</param>
            <returns>True if the two colors R, G and B values are equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetBrightness">
            <summary>
            Calculates the objective brightness of the color.
            </summary>
            <returns>The brightness in the range [0.0 - 255,0]</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetPerceivedBrightness">
            <summary>
            Calculates the brightness of the color like
            perceived by the human eye. Note that this is
            sdarker than <code>GetBrightness</code>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.ToString">
            <summary>
            Converts the color into a string in the HTML color format "#RRGGBBAA".
            </summary>
            <returns>The color as a string.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.Blend(OkuBase.Graphics.Color,OkuBase.Graphics.Color,System.Single)">
            <summary>
            Blends the to given colors by the given ratio.
            </summary>
            <param name="col1">The first color.</param>
            <param name="col2">The second color.</param>
            <param name="ratio">The mixing ration. Must be in the range [0.0 - 1.0]. 0.0 means col1, 1.0 col2.</param>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetContrastColor(OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color)">
            <summary>
            Gets the color that has more contrast on backgroundColor.
            </summary>
            <param name="backgroundColor">The color of the background.</param>
            <param name="bright">A bright color for dark backgrounds.</param>
            <param name="dark">A dark color for bright backgrounds.</param>
            <returns>Either the bright color or the dak color, depending on the brightness of the background color.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.Parse(System.String)">
            <summary>
            Tries to parse the given string into a color.
            The string is expected to be in the typical
            hexadecimal HTML color format (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
            </summary>
            <param name="str">The string representation of the color.</param>
            <returns>The parsed color.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.TryParse(System.String,OkuBase.Graphics.Color@)">
            <summary>
            Tries to parse the given string into a color.
            The string is expected to be in the typical
            hexadecimal HTML color format (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
            </summary>
            <param name="str">The string representation of the color.</param>
            <param name="color">The parsed color is returend here if the method returns true.</param>
            <returns>True if the given string could be parsed to a color, else false.</returns>
        </member>
        <member name="T:OkuBase.Graphics.Display">
            <summary>
            Handles getting and setting display modes.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Display.#ctor">
            <summary>
            Creates a new display handler.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.Display.CurrentMode">
            <summary>
            Gets the display mode that is currently set.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Display.GetSupportedModes">
            <summary>
            Gets all displaymodes that are supported by the current graphics device - monitor - combination.
            </summary>
            <returns>A list of all supported display modes.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Display.SetDisplayMode(OkuBase.Graphics.DisplayMode)">
            <summary>
            Sets the given display mode. Throws an exception if an error occurrs while doing so.
            </summary>
            <param name="mode">The display mode to be set.</param>
        </member>
        <member name="T:OkuBase.Graphics.DisplayMode">
            <summary>
            Specifies a display mode with resolution, display frequency, bits per pixel and display orientation.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.#ctor">
            <summary>
            Creates a new default display mode with resolution 800x600, display frequency 60Hz and 32 bits per pixel.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new display mode with the given settings.
            </summary>
            <param name="width">The horizontal resolution in pixels.</param>
            <param name="height">The vertical resolution in pixels.</param>
            <param name="frequency">The display frequency.</param>
            <param name="bitsPerPixel">The number of color bits per pixel.</param>
            <param name="orientation">The orientation of the display.</param>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Width">
            <summary>
            Gets or sets the horizontal resolution of the display in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Height">
            <summary>
            Gets or sets the vertical resolution of the display in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Frequency">
            <summary>
            Gets or sets the display refresh frequency in Hertz.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.BitsPerPixel">
            <summary>
            Gets or sets the number of color bits per pixel. Allowed values are 8, 16,24 and 32.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Orientation">
            <summary>
            Gets or sets the display orientation in degrees. Allowed values are 0 and 90.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.ToString">
            <summary>
            Creates a string representation of the display mode.
            </summary>
            <returns>A string representation of the display mode.</returns>
        </member>
        <member name="T:OkuBase.Graphics.ImageBase">
            <summary>
            Base class for all image types.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Id">
            <summary>
            Gets the unique id of this image.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.PrimitiveType">
            <summary>
            Defines the draw mode for raw vertex data.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.None">
            <summary>
            Do not draw anything.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Points">
            <summary>
            Draw a point at each vertex.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Lines">
            <summary>
            Draw one line for each pair of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Polygon">
            <summary>
            Draw a polygon starting at the first vertex and ending at the last.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.ClosedPolygon">
            <summary>
            Draw a polygon starting at the first vertex the the last one and also draw a line from the last to the first.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Triangles">
            <summary>
            Draw a single triangle for each triplet of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            Draws a triangle strip.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.TriangleFan">
            <summary>
            Draws a triangle fan.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Quads">
            <summary>
            Draws a quad for each quarttet of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.QuadStrip">
            <summary>
            Draw a quad strip.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.Title">
            <summary>
            Gets or sets the title of the display.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.DisplayWidth">
            <summary>
            Gets the width of the current display in pixels.
            This is either the window or the current render target.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.DisplayHeight">
            <summary>
            Gets the height of the current display in pixels.
            This is either the window or the current render target.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            Converts the given screen pixel coordinates to display client coordinates.
            The origin for these coordinates is in the lower left corner.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The client space coordinates of the given pixel. Note that this can be outside of the window in windowed mode.</returns>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ScreenToWorld(System.Int32,System.Int32)">
            <summary>
            Converts the given screen pixel coordinates to world coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The world space coordinates of the given pixel. Note that this can be outside of the window in windowed mode.</returns>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.GetDpiScale">
            <summary>
            Gets the factor by which the DPI setting of the system is higher than usual (96 dpi).
            </summary>
            <returns>The DPI factor.</returns>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.Clear">
            <summary>
            Clears the screen or current render target with the current background color.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawScreenAlignedQuad(OkuBase.Graphics.ImageBase,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image on a screen aligned quad so it fills the whole 
            screen using the given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="tint">The color tint the image with.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawScreenAlignedQuad(OkuBase.Graphics.ImageBase)">
            <summary>
            Draws the given image on a screen aligned quad so it fills the whole screen.
            </summary>
            <param name="image">The image to be drawn.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a line from start to end with the given width and color.
            </summary>
            <param name="x1">The x coordinate of the start point.</param>
            <param name="y1">The y coordinate of the start point.</param>
            <param name="x2">The x coordinate of the end point.</param>
            <param name="y2">The y coordinate of the end point.</param>
            <param name="width">The width of the line in pixels.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLines(OkuMath.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and colors.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw the lines with.</param>
            <param name="colors">The colors belonging to the vertices. Has to be same length as vertices.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixels.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLines(OkuMath.Vector2f[],OkuBase.Graphics.Color,System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and color.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw the lines with.</param>
            <param name="color">The color of the all lines.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixels.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawPoint(System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a point at the given point p with the given size and color.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="size">The size of the point in pixels.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawPoints(OkuMath.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single)">
            <summary>
            Draws a series of points at the given vertices with the given size and color.
            </summary>
            <param name="points">The center of the points in world space pixels.</param>
            <param name="colors">The color values belonging to the points. Must be same length as points.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="size">The size of the points in pixels.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.PopTransform">
            <summary>
            Pops the current transformation from the stack.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.Image">
            <summary>
            Defines a single image.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor">
            <summary>
            Creates a new empty image with no pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor(OkuBase.Graphics.ImageData)">
            <summary>
            Creates a new image with the given pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
            <param name="data">The pixel data of the new image.</param>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor(OkuBase.Graphics.ImageData,System.Boolean)">
            <summary>
            Creates a new image with the given pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
            <param name="data">The pixel data of the new image.</param>
            <param name="isCompressed">Determines if the image is compressed or not.</param>
        </member>
        <member name="P:OkuBase.Graphics.Image.IsCompressed">
            <summary>
            Gets if the image is compressed or not.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.Image.ImageData">
            <summary>
            Gets the raw image pixel data of the image.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.ImageData">
            <summary>
            Defines the pixel data for an image. The pixel data can be read and manipulated.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new image data with the given width and height.
            </summary>
            <param name="width">The width of the image data in pixels.</param>
            <param name="height">The height of the image data in pixels.</param>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates new image data with the given width and height and pixel data.
            </summary>
            <param name="width">The width of the image data in pixels.</param>
            <param name="height">The height of the image data in pixels.</param>
            <param name="pixelData">The pixel data of the new image data.</param>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.Width">
            <summary>
            Gets the width of the image data in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.Height">
            <summary>
            Gets the height of the image data in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.PixelData">
            <summary>
            Gets the raw internal pixel data array.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.IndexOfPixel(System.Int32,System.Int32)">
            <summary>
            Calculates the index of the pixel with the given, zero based x and y coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The index of the pixel in the _pixelData array.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the given, zero based coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at the given coordinates.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.SetPixelColor(System.Int32,System.Int32,OkuBase.Graphics.Color)">
            <summary>
            Sets the color of the pixel at the given, zero based coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.ToBitmap">
            <summary>
            Converts the image data to a Bitmap.
            </summary>
            <returns>The bitmap for the image data.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates new image data from the given bitmap.
            </summary>
            <param name="bitmap">The bitmap to read the pixel data from.</param>
            <returns>The image data version of the bitmap.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromFile(System.String)">
            <summary>
            Creates new image data from the given image file.
            </summary>
            <param name="filename">The path of the image file.</param>
            <returns>The image data of the image file.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromStream(System.IO.Stream)">
            <summary>
            Creates new image data from the given stream.
            The stream is expected to contain a complete image file.
            </summary>
            <param name="stream">The stream with image data.</param>
            <returns>The image data of the stream.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromRaw(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates new image data with the given width, height and raw pixel data.
            The bytes of the ints are expected to have the order BGRA.
            The first pixel is expected to be the one in the bottom left corner.
            </summary>
            <param name="rawData">The raw pixel data.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The image data.</returns>
        </member>
        <member name="T:OkuBase.Graphics.SpriteFont.CharDimensions">
            <summary>
            Used internally to store character dimensions. The values are represented in texture pixel space.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.SpriteFont.GetTextWidth(System.String)">
            <summary>
            Gets the width of the given text in world units.
            </summary>
            <param name="text">The text.</param>
            <returns>The width of the text.</returns>
        </member>
        <member name="M:OkuBase.Graphics.SpriteFont.GetTextWidth(System.String,System.Int32)">
            <summary>
            Gets the width of the first count character of text
            in world units.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The number of characters.</param>
            <returns>The width of the first count charaters.</returns>
        </member>
        <member name="T:OkuBase.Graphics.TextProcessor">
            <summary>
            A simple text processing engine. It is driven by passing
            the keys that are pressed on the keyboard to its ProcessKey
            method.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.#ctor">
            <summary>
            Creates a new text processor.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.CursorPosition">
            <summary>
            Gets or set the current position of the cursor.
            This is the character index in the text string
            and does not handle line breaks.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.Multiline">
            <summary>
            Gets or sets if multiple lines can be entered.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.GetCursorPosition(System.Int32@,System.Int32@)">
            <summary>
            Calculates the line and character position
            of the corsur in a multiline text processor.
            </summary>
            <param name="line">The line index is returned here.</param>
            <param name="character">The character index in the line is returned here.</param>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.ProcessKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a key stroke and updates the text and cursor position accordingly.
            </summary>
            <param name="key">The key that was pressed.</param>
            <returns>True if the text was changed by processing the key, else false.</returns>
        </member>
        <member name="T:OkuBase.Graphics.TextureFilter">
            <summary>
            Defines methods for texture filtering.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.TextureFilter.NearestNeighbor">
            <summary>
            Nearest neighbor interpolation using Manhattan Distance.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.TextureFilter.Linear">
            <summary>
            Linear Interpolation.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.LineMode">
            <summary>
            Defines how vertices should be interpreted.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.Polygon">
            <summary>
            Draws a polygon ffrom the vertices where the first and the last vertex are not connected.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.PolygonClosed">
            <summary>
            Draws a polygon from the vertices where the first and the last vertex are connected too.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.LineSegments">
            <summary>
            Draws a line segment for each pair of vertices.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.ViewPortChangeEventHandler">
            <summary>
            Specified the delegate for a viewport change event handler. Should only be implemented by the Renderer.
            </summary>
            <param name="sender">The view port that fired the change event.</param>
        </member>
        <member name="T:OkuBase.Graphics.ViewPort">
            <summary>
            Species the part of the world space that is currently shown on screen.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new viewport centered at the world space coordinate (0,0)
            and width the given width and height.
            </summary>
            <param name="width">The width of the viewport in world space units.</param>
            <param name="height">The height of the viewport in world space units.</param>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new viewport with the given boundaries.
            The boundaries are inclusive.
            </summary>
            <param name="left">The left bound of the viewport.</param>
            <param name="top">The top bound of the viewport.</param>
            <param name="right">The right bound of the viewport.</param>
            <param name="bottom">The bottom bound of the viewport.</param>
        </member>
        <member name="E:OkuBase.Graphics.ViewPort.Change">
            <summary>
            Event that is triggered when any parameter of the viewport is changed.
            The renderer should listen to this event and change the view of the scene
            accordingly.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.OnChange(OkuBase.Graphics.ViewPort)">
            <summary>
            Is called when any of the viewport parameters is changed.
            </summary>
            <param name="sender">The viewport that triggered the event.</param>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Center">
            <summary>
            Gets or sets the center of the viewport.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Left">
            <summary>
            Gets or sets the left border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Top">
            <summary>
            Gets or sets the top border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Right">
            <summary>
            Gets or sets the right border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Bottom">
            <summary>
            Gets or sets the bottom border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Width">
            <summary>
            Gets the width of the viewport in world space units.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Height">
            <summary>
            Gets the height of the viewport in world space units.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.Contains(OkuMath.Vector2f)">
            <summary>
            Check if the given point is inside of the viewport.
            </summary>
            <param name="p">The point to check.</param>
            <returns>True if the point is inside the viewport, else False.</returns>
        </member>
        <member name="T:OkuBase.Input.InputManager">
            <summary>
            Defines a manager that handles input processing and key bindings.
            </summary>
        </member>
        <member name="M:OkuBase.Input.InputManager.#ctor">
            <summary>
            Creates a new input mananger.
            </summary>
        </member>
        <member name="M:OkuBase.Input.InputManager.Update(System.Single)">
            <summary>
            Updates subsequent inputs.
            </summary>
        </member>
        <member name="T:OkuBase.Input.JoystickInfo">
            <summary>
            Contains the information about one single joystick.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.#ctor(System.UInt32,OkuBase.Platform.JOYCAPS)">
            <summary>
            Creates a new joystick with the given ID and capabilities.
            </summary>
            <param name="id">The joysticks ID.</param>
            <param name="caps">The joysticks capabilities.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.#ctor(System.UInt32,OkuBase.Platform.JOYCAPS,OkuBase.Platform.JOYINFOEX)">
            <summary>
            Creates a new joystick with the given ID and capabilities and initializes it with the given state.
            </summary>
            <param name="id">The joysticks ID.</param>
            <param name="caps">The joysticks capabilities.</param>
            <param name="state">The joysticks current state.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.SetState(OkuBase.Platform.JOYINFOEX)">
            <summary>
            Sets the current state of the joystick.
            </summary>
            <param name="state">The joysticks current state.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsDown(System.Int32,System.UInt32)">
            <summary>
            Checks if the button with the given index is currently pressed or not in the given button state.
            </summary>
            <param name="buttonIndex">The index of the button. Must be in the range 0..NumberOfButtons.</param>
            <param name="buttonState">The button state to get the current state of the button from.</param>
            <returns>True if the button is down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsDown(System.Int32)">
            <summary>
            Checks if the given button is down at the moment.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button is down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsHoldDown(System.Int32)">
            <summary>
            Checks if the given button is hold down.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonPressed(System.Int32)">
            <summary>
            Checks if the given button was pressed down since the last frame.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button was pressed down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonRaised(System.Int32)">
            <summary>
            Checks if the given button was raised since the last frame.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button was raised, else false.</returns>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.ID">
            <summary>
            Gets or sets the joystick ID used to query the joysticks state with the Win-API methods.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.NumberOfButtons">
            <summary>
            Gets the number of buttons of the joystick.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.NumberOfAxis">
            <summary>
            Gets the number of axis ths joystick has.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.X">
            <summary>
            Gets or sets the current X-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.Y">
            <summary>
            Gets or sets the current Y-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.Z">
            <summary>
            Gets or sets the current Z-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.R">
            <summary>
            Gets or sets the current position of the rudder or fourth joystick axis in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.U">
            <summary>
            Gets or sets the current fifth axis position in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.V">
            <summary>
            Gets or sets the current sixth axis position in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.PointOfViewAngle">
            <summary>
            Gets or sets the current angle of the point-of-view control. Values for this member are in the range 0 through 359.99. These values represent the angle, in degrees, of each view.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ToString">
            <summary>
            Creates a string representation of the current joystick state. Should only be used for debugging.
            </summary>
            <returns>A string representation of the current joystick state.</returns>
        </member>
        <member name="T:OkuBase.Input.JoystickInput">
            <summary>
            JoystickInput is a list of all joysticks currently connected to the system.
            You should call the <code>Update</code> or <code>UpdateAll</code> method periodically
            in your game loop. These will update the current state of the joysticks.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.#ctor">
            <summary>
            Creates a new JoystickInput. This will also load infos about all joyticks connected to the system.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.Initialize">
            <summary>
            Refreshes all joystick information that is currently stored. 
            This can be used to check if a joystick has been connected/disconnected 
            recently.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.UpdateAll">
            <summary>
            Updates the states of all joysticks. Should be called before accessing the joysticks data.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.Update(System.Int32)">
            <summary>
            Updates the state of a single joystick. Should be called before accessing the joysticks data.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:OkuBase.Input.KeyAction">
            <summary>
            Defines an action that can be done on a key.
            </summary>
        </member>
        <member name="F:OkuBase.Input.KeyAction.Down">
            <summary>
            The button is pressed down.
            </summary>
        </member>
        <member name="F:OkuBase.Input.KeyAction.Up">
            <summary>
            The button is raised up.
            </summary>
        </member>
        <member name="T:OkuBase.Input.KeyboardInput">
            <summary>
            Handles getting input from the keyboard.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.#ctor">
            <summary>
            Creates a new keyboard input.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.Update">
            <summary>
            Updates the state of all keys of the keyboard. This state is used by
            <code>IsDown</code> to check if a key is down or up.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsDown(System.Windows.Forms.Keys,System.Byte[])">
            <summary>
            Checks if the given key is currently pressed down or not. This function always
            uses the keyboard state that was loaded in the last call of the <code>Update</code>
            method.
            </summary>
            <param name="key">The key to check.</param>
            <param name="state">An array that contains the key states.</param>
            <returns>True if the key is pressed down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the given key is pressed down now.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns>True if the key is pressed down right now, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsHoldDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the given key is hold down.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns>True if the key is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyWasPressed(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key was pressed down since the last frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key was pressed, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyWasRaised(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key was raised since the last frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key was raised, else false.</returns>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.CapsLockActive">
            <summary>
            Gets if the caps lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.ScrollLockActive">
            <summary>
            Gets if the scroll lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.NumLockActive">
            <summary>
            Gets if the num lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.GetPressedButtons">
            <summary>
            Gets the buttons that have been pressed down since the last frame.
            </summary>
            <returns>A list of the buttons that have been pressed down.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.GetRaisedButtons">
            <summary>
            Gets the buttons that have been raised up since the last frame.
            </summary>
            <returns>A list of the buttons that have been raised up.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyToChar(System.Windows.Forms.Keys)">
            <summary>
            Converts the given virtual key code to an ascii character.
            </summary>
            <param name="key">The virtual key code.</param>
            <returns>The char for the given key code or 0 if the given key has no char.</returns>
        </member>
        <member name="T:OkuBase.Input.MouseButton">
            <summary>
            Defines a set of mouse buttons.
            </summary>
        </member>
        <member name="T:OkuBase.Input.MouseInput">
            <summary>
            Handles access to the mouse cursor position and button states.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.#ctor">
            <summary>
            Creates a new mouse input.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.Update">
            <summary>
            Updates the current position and buttons states that are used internally.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.X">
            <summary>
            Gets the absolute vertical coordinate of the mouse cursor in screen space.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.Y">
            <summary>
            Gets the absolute horizontal coordinate of the mouse cursor in screen space.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.RelativeX">
            <summary>
            Gets the change in the vertical coordinate of the mouse cursor in screen space
            since the last call to <code>Update</code>.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.RelativeY">
            <summary>
            Gets the change in the horizontal coordinate of the mouse cursor in screen space
            since the last call to <code>Update</code>.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsDown(OkuBase.Input.MouseButton,System.Byte[])">
            <summary>
            Check if the given button is down in the given state.
            </summary>
            <param name="button">The button to e checked.</param>
            <param name="state">The button state array.</param>
            <returns>True if the button is down, else False.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsDown(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button is currently pressed down. Returns true as long as the button is pressed down.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button is pressed down right now, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsHoldDown(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button is currently hold down, that is it is pressed down now and was also pressed down last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonPressed(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button was pressed down since the last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button was pressed, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonRaised(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button was raised since the last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button was raised, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.GetPressedButtons">
            <summary>
            Gets the buttons that have been pressed down since the last frame.
            </summary>
            <returns>A list of the buttons that have been pressed down.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.GetRaisedButtons">
            <summary>
            Gets the buttons that have been raised up since the last frame.
            </summary>
            <returns>A list of the buttons that have been raised up.</returns>
        </member>
        <member name="P:OkuBase.Input.MouseInput.WheelDelta">
            <summary>
            Gets the amount of lines the mouse wheel has scrolled.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.WheelSpinned">
            <summary>
            Gets if the mouse wheel has been scrolled or not.
            </summary>
        </member>
        <member name="T:OkuBase.KeySequence">
            <summary>
            Internal sequence class that is used to generate content ids and 
            other artifical ids.
            </summary>
        </member>
        <member name="M:OkuBase.KeySequence.ResetSequence(System.String)">
            <summary>
            Resets the given sequence to zero.
            </summary>
            <param name="name">The name of the sequence.</param>
            <returns>True if the sequence was reset, false if there is no sequence with the given name.</returns>
        </member>
        <member name="M:OkuBase.KeySequence.ResetAll">
            <summary>
            Resets all sequences to zero.
            </summary>
        </member>
        <member name="P:OkuBase.KeySequence.Count">
            <summary>
            Gets the number of sequences that exist.
            </summary>
        </member>
        <member name="M:OkuBase.KeySequence.AddSequence(System.String)">
            <summary>
            Adds a new sequence with the given name.
            The new sequence starts with 1.
            </summary>
            <param name="name">The name of the sequence.</param>
            <returns>True if the sequence was added, false if there already is a sequence with the given name.</returns>
        </member>
        <member name="M:OkuBase.KeySequence.NextValue(System.String)">
            <summary>
            Gets the next value of a sequence.
            </summary>
            <param name="sequence">The name of the sequence.</param>
            <returns>The next value of the sequence.</returns>
        </member>
        <member name="M:OkuBase.KeySequence.SetCurrentValue(System.String,System.Int32)">
            <summary>
            Sets the current value of a sequence.
            </summary>
            <param name="sequence">The name of the sequence.</param>
            <param name="value">The value to set the sequence to.</param>
            <returns>True if the sequence value was set, False if there is no sequence with the given name.</returns>
        </member>
        <member name="T:OkuBase.OkuGame">
            <summary>
            Main game class that runs the whole game.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.#ctor">
            <summary>
            Creates a new game.
            </summary>
        </member>
        <member name="P:OkuBase.OkuGame.Name">
            <summary>
            Gets or sets the name of the game.
            </summary>
        </member>
        <member name="P:OkuBase.OkuGame.Oku">
            <summary>
            Gets the oku library.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Run">
            <summary>
            Runs the game in an infinite loop.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.DoInitialize(OkuBase.Settings.OkuSettings)">
            <summary>
            Triggers the initialization of all engine parts.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Initialize">
            <summary>
            Can be overriden to do custom initialization when the game starts.
            This is called after the renderer, sound engine and config file
            have been already initialized.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.DoUpdate(System.Single)">
            <summary>
            Triggers update of all engine parts and node actions every frame.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:OkuBase.OkuGame.Update(System.Single)">
            <summary>
            Can be overriden to add custom update code. This method is
            called every frame and should be use to update the game scene.
            </summary>
            <param name="dt">The time since the last frame in fractional seconds.</param>
        </member>
        <member name="M:OkuBase.OkuGame.DoRender">
            <summary>
            Trigger the rendering of the whole scene.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Render">
            <summary>
            Can be overriden to add custom rendering code. This method is called every
            frame just after the Update method.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.User32">
            <summary>
            Wraps functions from user32.dll.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.User32.Point">
            <summary>
            Internal struct to get mouse position.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYINFOEX">
            <summary>
            Contains extended information about the joystick position, point-of-view position, and button state.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwSize">
            <summary>
            Size, in bytes, of this structure. Use System.Runtime.InteropServices.Marshal.SizeOf(...) to initialize this.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwFlags">
            <summary>
            Flags indicating the valid information returned in this structure. Members that do not contain valid information are set to zero.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwRpos">
            <summary>
            Current position of the rudder or fourth joystick axis.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwUpos">
            <summary>
            Current fifth axis position.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwVpos">
            <summary>
            Current sixth axis position.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwButtons">
            <summary>
            Current state of the 32 joystick buttons. The value of this member can be set to any combination of JOY_BUTTON n flags, where n is a value in the range of 1 through 32 corresponding to the button that is pressed.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwButtonNumber">
            <summary>
            Current button number that is pressed.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwPOV">
            <summary>
            Current position of the point-of-view control. Values for this member are in the range 0 through 35,900. These values represent the angle, in degrees, of each view multiplied by 100.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwReserved1">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwReserved2">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYINFO">
            <summary>
            The JOYINFO structure contains information about the joystick position and button state.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wButtons">
            <summary>
            Current state of joystick buttons.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYCAPS">
            <summary>
            The JOYCAPS structure contains information about the joystick capabilities.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMid">
            <summary>
            Manufacturer identifier.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPid">
            <summary>
            Product identifier.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szPname">
            <summary>
            Null-terminated string containing the joystick product name.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wXmin">
            <summary>
            Minimum X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wXmax">
            <summary>
            Maximum X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wYmin">
            <summary>
            Minimum Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wYmax">
            <summary>
            Maximum Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wZmin">
            <summary>
            Minimum Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wZmax">
            <summary>
            Maximum Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wNumButtons">
            <summary>
            Number of joystick buttons.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPeriodMin">
            <summary>
            Smallest polling frequency supported when captured by the joySetCapture function.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPeriodMax">
            <summary>
            Largest polling frequency supported when captured by joySetCapture.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wRmin">
            <summary>
            Minimum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wRmax">
            <summary>
            Maximum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wUmin">
            <summary>
            Minimum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wUmax">
            <summary>
            Maximum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wVmin">
            <summary>
            Minimum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wVmax">
            <summary>
            Maximum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wCaps">
            <summary>
            Joystick capabilities.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMaxAxes">
            <summary>
            Maximum number of axes supported by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wNumAxes">
            <summary>
            Number of axes currently in use by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMaxButtons">
            <summary>
            Maximum number of buttons supported by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szRegKey">
            <summary>
            Null-terminated string containing the registry key for the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szOEMVxD">
            <summary>
            Null-terminated string identifying the joystick driver OEM.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.Winmm">
            <summary>
            Wrapper class for the Winmm.dll. Currently only most common joystick functions are supported.
            </summary>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetNumDevs">
            <summary>
            The joyGetNumDevs function queries the joystick driver for the number of joysticks it supports.
            </summary>
            <remarks>Use the joyGetPos function to determine whether a given joystick is physically attached to the system. If the specified joystick is not connected, joyGetPos returns a JOYERR_UNPLUGGED error value.</remarks>
            <returns>The joyGetNumDevs function returns the number of joysticks supported by the current driver or zero if no driver is installed.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetPos(System.UInt32,OkuBase.Platform.JOYINFO@)">
            <summary>
            The joyGetPos function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to JOYSTICKID1 and JOYSTICKID2.</param>
            <param name="joyInfo">Pointer to a JOYINFO structure that contains the position and button status of the joystick.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM, JOYERR_UNPLUGGED.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetPosEx(System.UInt32,OkuBase.Platform.JOYINFOEX@)">
            <summary>
            The joyGetPosEx function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to JOYSTICKID1 and JOYSTICKID2.</param>
            <param name="joyInfo">Pointer to a JOYINFOEX structure that contains extended position information and button status of the joystick. You must set the dwSize and dwFlags members or joyGetPosEx will fail. The information returned from joyGetPosEx depends on the flags you specify in dwFlags.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM, MMSYSERR_BADDEVICEID, JOYERR_UNPLUGGED, JOYERR_PARMS.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetDevCaps(System.UInt32,OkuBase.Platform.JOYCAPS@,System.UInt32)">
            <summary>
            The joyGetDevCaps function queries a joystick to determine its capabilities.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from -1 to 15. A value of -1 enables retrieval of the szRegKey member of the JOYCAPS structure whether a device is present or not. For Windows NT 4.0, valid values are limited to zero (JOYSTICKID1) and JOYSTICKID2.</param>
            <param name="joyCaps">Pointer to a JOYCAPS structure to contain the capabilities of the joystick.</param>
            <param name="size">Size, in bytes, of the JOYCAPS structure.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM.</returns>
        </member>
        <member name="T:OkuBase.Settings.GraphicsSettings">
            <summary>
            Defines settings for the graphics driver.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.DriverName">
            <summary>
            Gets or sets the name of the driver to be used. "null" is always available if you do not want graphics.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.BackgroundColor">
            <summary>
            Gets or sets the color that is used to clear the screen and therefore is the background color.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.Fullscreen">
            <summary>
            Gets or sets if the window should be fullscreen or not.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.TextureFilter">
            <summary>
            Gets or sets the filter that is used for scaling textures.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.Width">
            <summary>
            Gets or sets the width of the game window in pixels, excluding the window borders.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.Height">
            <summary>
            Gets or sets the height of the game window in pixels, excluding the window borders.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.EnableDepthTest">
            <summary>
            Gets or sets if the depth test should be enabled or not.
            </summary>
        </member>
        <member name="P:OkuBase.Settings.GraphicsSettings.DpiAware">
            <summary>
            Gets or sets if the window is automatically scalled on high DPI displays (false, the default)
            or the game itself is aware of that and scales accordingly (true).
            </summary>
        </member>
        <member name="M:OkuBase.Utils.Converter.FloatToString(System.Single)">
            <summary>
            Converts the given float value to a string. The decimal separator will always be ".".
            </summary>
            <param name="value">The float to be converted.</param>
            <returns>The string represenation of the given float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.StrToFloat(System.String)">
            <summary>
            Converts the given string to a float value. The decimal separator has to be a ".".
            </summary>
            <param name="str">The string to be converted to a float.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.TryStrToFloat(System.String,System.Single@)">
            <summary>
            Converts the given string to a float value. The decimal separator has to be a ".".
            </summary>
            <param name="str">The string to be converted to a float.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseVectors(System.String)">
            <summary>
            Converts the given string to a vector array.
            The string is expected to be in the format that
            is created by VectorsToStr (x1;y1|x2;y2|...|xn;yn).
            </summary>
            <param name="str">The string with the vectors.</param>
            <returns>A vector array with all vectors.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseColors(System.String)">
            <summary>
            Converts the given string to a color array.
            The string is expected to be in the format that
            is created by ColorsToStr.
            </summary>
            <param name="str">The string with the colors.</param>
            <returns>A color array with all colors.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseEnum``1(System.String)">
            <summary>
            Parses the given string into a value of the generic
            type which must be an enum. Unfiortunatelly, this cannot
            be forced through generic contraints.
            </summary>
            <typeparam name="T">The enum type to parse to.</typeparam>
            <param name="str">The string to parse.</param>
            <returns>The parsed enum value or default(T) if no member was found.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.TryParseEnum``1(System.String,``0@)">
            <summary>
            Tries to parse the given string into a member of the given enum type.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <param name="result">If true is returned, the parsed enum member is returned here.</param>
            <returns>True if the string was parsed successful, else false.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.StrToBool(System.String,System.Boolean)">
            <summary>
            Converts the given string to a boolean value.
            "yes" is converted to true and "no" is converted to false.
            If the string is neither "yes" nor "no", defaultIfNull is returned.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="defaultIfNull">The default value to return when the string cannot be converted to boolean.</param>
            <returns>True if the given string is "yes", false if it is "no" or defaultIfNull if it could bot be converted.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.BoolToStr(System.Boolean)">
            <summary>
            Convert the given boolean value to a string.
            True is converted "yes" and false is converted to "no".
            </summary>
            <param name="value">The boolean value.</param>
            <returns>"yes" if true is given, else "no".</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.TryParseAABB(System.String,OkuBase.Geometry.Rectangle2f@)">
            <summary>
            Tries to parse the given string to an AABB. The string is expected to be in the format "x1;y1|x2;y2".
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="result">The parsed AABB is returned here.</param>
            <returns>True if the string could be parsed, else false.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.RandomFloat(System.Random)">
            <summary>
            Calculates a random float value in the range [-1.0,+1.0].
            </summary>
            <param name="rand">The random number generator to use.</param>
            <returns>A random float value in the range [-1.0,+1.0].</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ToOkuString(OkuMath.Vector2f[])">
            <summary>
            Converts the vector array to a string.
            </summary>
            <param name="vectors">The vector array to be converted.</param>
            <returns>The string representation of the vector array.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ToOkuString(OkuBase.Graphics.Color[])">
            <summary>
            Converts the color array to a string.
            </summary>
            <param name="colors">The color array to convert.</param>
            <returns>A string representation of the color array.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ClosestPoint(OkuMath.Vector2f[],OkuMath.Vector2f,System.Single@)">
            <summary>
            Calculates the point in the array that is closest to the given point.
            </summary>
            <param name="vectors">The array of vectors.</param>
            <param name="point">The point to find the closest point for.</param>
            <param name="distance">The distance is of the closest point is returned here.</param>
            <returns>The index of the closest point. -1 if vectors does not contain any points.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingBox(OkuMath.Vector2f[])">
            <summary>
            Calculates the axis aligned bounding box of the vector array.
            </summary>
            <param name="vectors">The vectors to calculate the AABB for.</param>
            <returns>The AABB of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetCenter(OkuMath.Vector2f[])">
            <summary>
            Calculates the arithmetic center of the points in the vector array.
            </summary>
            <param name="vectors">The vectors to get the center for.</param>
            <returns>The arithmetic center of the points.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingCircleRadius(OkuMath.Vector2f[],OkuMath.Vector2f)">
            <summary>
            Calculates the radius of the bounding circle of the vectors with the given center.
            </summary>
            <param name="vectors">The vectors calculate to get the circle for.</param>
            <param name="center">The center of the calculated circle.</param>
            <returns>The radius of the bounding circle of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingCircleRadiusCentered(OkuMath.Vector2f[])">
            <summary>
            Calculates the radius of the bounding circle using the arithmetic center of the vectors.
            </summary>
            <param name="vectors">The vectors to calculate the bounding circle for.</param>
            <returns>The radius of the bounding circle of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetAttributeValue(System.Xml.XmlAttributeCollection,System.String,System.String)">
            <summary>
            Gets the value of the attribute with the given name.
            If there is no attribute with the given name, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The value of the attribute, or the given default value if there is 
            no attribute with the given name.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetFloat(System.Xml.XmlAttributeCollection,System.String,System.Single)">
            <summary>
            Gets the attribute with the given name in float format.
            If there is no attribute with the given name or its value cannot be
            converted to a float, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The float value of the attribute, or the given default value if there is 
            no attribute with the given name or its value cannot be converted to a float.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetInt(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            Gets the attribute with the given name in int format.
            If there is no attribute with the given name or its value cannot be
            converted to a int, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The int value of the attribute, or the given default value if there is 
            no attribute with the given name or its value cannot be converted to a int.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PopFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the item at index 0 and returns it.
            </summary>
            <typeparam name="T">The type if the list.</typeparam>
            <param name="list">The list to change.</param>
            <returns>The item at index 0.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PopLast``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the item at the end of the list and returns it.
            </summary>
            <typeparam name="T">The type if the list.</typeparam>
            <param name="list">The list to change.</param>
            <returns>The item at the end of the list.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetTagValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value between the opening and the closing tag.
            </summary>
            <param name="node">The node to read from.</param>
            <param name="name">The name of the child tag to read the value from.</param>
            <returns>The value of the tag or null if there is no such tag.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetPath(System.Xml.XmlNode)">
            <summary>
            Gets the dotted path of the given XML node as a string.
            The name of the node itself is included.
            </summary>
            <param name="node">The node the get the path for.</param>
            <returns>The dotted path of the given node.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.WriteValueTag(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes and openening tag, a value and a closing tag in one step.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="name">The of the tag to write.</param>
            <param name="value">The value to write into the tag.</param>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetDelegateType(System.Reflection.MethodInfo)">
            <summary>
            Gets the delegate type of the method which can be used to create a 
            delegate for it at runtime.
            </summary>
            <param name="method">The method.</param>
            <returns>The delegate type of the method, or null if it could not be found.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PolygonIsClockwise(OkuMath.Vector2f[])">
            <summary>
            Checks if the polygon is clockwise or counter-clockwise.
            </summary>
            <returns>True if the polygon is clockwise, else false.</returns>
        </member>
    </members>
</doc>
