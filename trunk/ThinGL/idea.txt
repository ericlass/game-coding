Create a tool that generates C# classes from official header files

- gl.h is migrated to class Gl. This header is never updated
- glext.h is migrated to class GlExt
- wglext.h is migrated to class WglExt
- glcorearb.h is migrated to class GlCoreArb

- Constanst are migrated to "public const uint <name> = <hex_value>"
  - Example: "#define GL_POINTS 0x0000" -> "public const uint GL_POINTS = 0x0000"
  
- Function prototypes are migrated to delegates (except gl.h)
  - Example:
    "typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);"
    becomes
    "public delegate void PFNGLDRAWRANGEELEMENTSPROC (uint mode, uint start, uint end, int count, uint type, IntPtr indices);"
    
- Functions themselves are migrated as:
  - Example:
    "GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);"
    becomes
    "public void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices);"
    
- Extension loading
  - Use wglGetprocAddress with name of function. If 0 is returned, the function is not supported.
  - Marshal function pointer to delegate and rememeber in dictionary
  
- Regex replacements (EmEditor)
  - constants: "#define (GL_[^\s]*)[\s]*(0x[0123456789AaBbCcDdEeFf]*)" -> "public const uint \1 = \2;"
  - function pointer types: "typedef[\s]*([^\s]*)[\s]*(\**)\(APIENTRYP[\s]*(PFN[^\)]*)\)[\s]*([^;]*)" -> "private delegate \1\2 \3\4"
  - funcions: "GLAPI[\s]*([^\s]*)[\s]*(\**)APIENTRY[\s]*([^\s\(]*)[^\(]*([^;]*)" -> "public static \1\2 \3\4"
  - wgl function: ".*\s*WINAPI\s*([^;]*);" -> "private delegate \1"