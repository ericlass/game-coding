<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OkuBase</name>
    </assembly>
    <members>
        <member name="T:OkuBase.Audio.Sound">
            <summary>
            Contains a wave form including some information about the format and the sample data itself.
            </summary>
        </member>
        <member name="T:OkuBase.Audio.WaveLoader">
            <summary>
            Can be used to load RIFF WAVE files (*.wav). At the moment only PCM (uncompressed) wave files
            with 16bit samples are supported. The number of channels and the sample rate can be choosen freely.
            </summary>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.LoadWave(System.String)">
            <summary>
            Loads a RIFF WAVE from the given file.
            </summary>
            <param name="filename">The path to a wave file.</param>
            <returns>The loaded wave form or null if an error occurred.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.LoadWave(System.IO.Stream)">
            <summary>
            Loads a RIFF WAVE from the given stream.
            </summary>
            <param name="stream">The stream that contains the wave file.</param>
            <returns>The loaded wave form or null if an error occurred.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadRiffHeader(System.IO.BinaryReader)">
            <summary>
            Reads the header of a riff wave file using the given BinaryReader.
            </summary>
            <param name="reader">A binary reader with a riff wave base stream.</param>
            <returns>The size of the riff wave or 0 if the given stream is not a riff wave.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.FindString(System.IO.BinaryReader,System.String)">
            <summary>
            Finds the given string in the given binary reader. If the string was found the stream
            pointer points to the first byte after the string. The search is started at the
            current position in the stream.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="str">The string to find.</param>
            <returns>True if the string was found, else False.</returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadFormatChunk(System.IO.BinaryReader,OkuBase.Audio.Sound)">
            <summary>
            Reads the format chunk of a riff wave that is given in reader. 
            If the format chunk was read successfully the format information
            are stored in the given wave.
            </summary>
            <param name="reader">The reader to read the format chunk from.</param>
            <param name="wave">The wave form to put the format information into.</param>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Audio.WaveLoader.ReadChannelData(System.IO.BinaryReader,OkuBase.Audio.Sound)">
            <summary>
            Reads the channel sample data from a riff wave in the given reader.
            The channel data is returned in the ChannelData property of the wave
            parameter. This parameter has to be passed to the ReadFormatChunk
            method before, so the NumChannels property is setup correctly.
            </summary>
            <param name="reader">The BinaryReader used to the channel data.</param>
            <param name="wave">The wave form that will be filled with the channel data.</param>
            <returns>True if the channel data has been loaded successfully, else False.</returns>
        </member>
        <member name="T:OkuBase.Collections.DynamicArray`1">
            <summary>
            Provides a virtual dynamic array. The internal array is resized intelligently.
            </summary>
            <typeparam name="T">The type of data to be stored.</typeparam>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor">
            <summary>
            Create a new dynamic array with the default length of 10.
            </summary>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new dynamic array with the given length.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.#ctor(`0[])">
            <summary>
            Creates a new dynamic array using the given data array.
            In fact, the given array is cloned.
            </summary>
            <param name="data">The inital data array.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.ResizeArray(System.Int32)">
            <summary>
            Resizes the internal array to the given new size.
            </summary>
            <param name="newSize">The new size of the array.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.GetNextSize(System.Int32)">
            <summary>
            Calculates the next size for the internal array based on the given size.
            </summary>
            <param name="size">The current size of the array.</param>
            <returns>The new size for the array.</returns>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.AsureCapacity(System.Int32)">
            <summary>
            Makes sure that at least the ginven number of entries fits in to the internal array.
            </summary>
            <param name="capacity">The number of entries the internal array should at least contain.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Clear">
            <summary>
            Clear the dynamic array.
            </summary>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Add(`0)">
            <summary>
            Adds the given item to the end of the list.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.AddRange(`0[])">
            <summary>
            Adds the given array of items to the end of the list.
            </summary>
            <param name="items">The items to be added.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Delete(System.Int32)">
            <summary>
            Deletes the item at the given index from the list.
            </summary>
            <param name="index">The index of the item to delete.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.Insert(`0,System.Int32)">
            <summary>
            Insert the given item at the given index.
            Existing items at indexes >= index are moved to make
            place for the new item.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="index">The index to insert the item add.</param>
        </member>
        <member name="M:OkuBase.Collections.DynamicArray`1.GetCollapsedArray">
            <summary>
            Gets a new array that is exactly Count items long.
            </summary>
            <returns>A new array that is exactly Count items long.</returns>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Capacity">
            <summary>
            Gets or sets the current size of the internal array. Note that settings the capacity
            trigger resizing the internal which really creates a new one.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Count">
            <summary>
            The current number of entries in this dynamic array.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.InternalArray">
            <summary>
            Gets the interal array. Please make sure to not store any references to it, as the
            array might be recreated if it has to be resized. Any references to it would then
            lead to a memory leak.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.DynamicArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index.
            </summary>
            <param name="index">The index of the value.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="T:OkuBase.Collections.SizedList`1">
            <summary>
            Defines a list with a mximum size. If more items are added, the older items are dropped from the list.
            </summary>
            <typeparam name="T">THe type of the items that a re stored.</typeparam>
        </member>
        <member name="M:OkuBase.Collections.SizedList`1.#ctor(System.Int32)">
            <summary>
            Creates a new sized list with the given size.
            </summary>
            <param name="size">The maximum size of the list.</param>
        </member>
        <member name="M:OkuBase.Collections.SizedList`1.Add(`0)">
            <summary>
            Adds the given item to the end of the list.
            If the list is already completely filled, the oldest
            item is dropped so the new items can be added.
            </summary>
            <param name="item">The item to be added.</param>
            <returns>True if another item had to be dropped, else false.</returns>
        </member>
        <member name="M:OkuBase.Collections.SizedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the items at the given index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:OkuBase.Collections.SizedList`1.Clear">
            <summary>
            Clears all items from the list.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.SizedList`1.Size">
            <summary>
            Gets the maximum size of the list.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.SizedList`1.Count">
            <summary>
            Gets the current number of items in the list.
            </summary>
        </member>
        <member name="P:OkuBase.Collections.SizedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index. 
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Initialize(OkuBase.Settings.AudioSettings)">
            <summary>
            Initializes the sound engine.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Update(System.Single)">
            <summary>
            Updates the sounds that are currently played.
            </summary>
            <param name="dt">The time passed since the last update.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Finish">
            <summary>
            Frees all resources used by the sound engine.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Play(OkuBase.Audio.Source)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="source">The source to be played.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Pause(OkuBase.Audio.Source)">
            <summary>
            Pauses the given sound.
            </summary>
            <param name="source">The source to be paused.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.Stop(OkuBase.Audio.Source)">
            <summary>
            Stops the given sound.
            </summary>
            <param name="source">The source to be stopped.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.LoadSource(OkuBase.Audio.Source)">
            <summary>
            Initializes the given source.
            </summary>
            <param name="source">The source to be initialized.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.UpdateSource(OkuBase.Audio.Source)">
            <summary>
            Updates an existing sources properties. Does not update the underlying sound.
            </summary>
            <param name="source">The source to be updated.</param>
        </member>
        <member name="M:OkuBase.Driver.IAudioDriver.ReleaseSource(OkuBase.Audio.Source)">
            <summary>
            Releases the given source. It cannot be played afterwards.
            </summary>
            <param name="source">The source to be released.</param>
        </member>
        <member name="P:OkuBase.Driver.IAudioDriver.Volume">
            <summary>
            Gets or set the global volume of playback in the range 0.0...1.0.
            </summary>
        </member>
        <member name="T:OkuBase.Driver.DriverManager">
            <summary>
            Manages loading of drivers from assemblies that must be stored 
            in the same path as the executing assembly (usualy the .exe file).
            Only one driver of each type can be loaded at a time.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetBackgroundColor(OkuBase.Graphics.Color)">
            <summary>
            Sets the current background color.
            </summary>
            <param name="color">The new background color.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.Initialize(OkuBase.Settings.GraphicsSettings)">
            <summary>
            Is called once at the start of the application. It should do all necessary initialization
            that is needed by the renderer. It has to create the form that is used to display the game.
            </summary>
            <param name="settings">The settings for rendering.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.Update(System.Single)">
            <summary>
            Is called each frame during the update process. This must not do any rendering. It should
            only be used for updating internal stuff.
            </summary>
            <param name="dt">The time since the last frame in seconds.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.Finish">
            <summary>
            Is called when the application ends. All resources allocated by the renderer have to be freed
            by this method.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.InitImage(OkuBase.Graphics.Image)">
            <summary>
            Initializes an image which means that textures are created for them.
            </summary>
            <param name="image">The image to be initialized.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.UpdateImage(OkuBase.Graphics.Image,System.Int32,System.Int32,System.Int32,System.Int32,OkuBase.Graphics.ImageData)">
            <summary>
            Updates a region of the given image content with new image data.
            </summary>
            <param name="image">The image to be updated.</param>
            <param name="x">The left bound of the region.</param>
            <param name="y">The top bound of the region.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="image">The image data to put into the region.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.ReleaseImage(OkuBase.Graphics.Image)">
            <summary>
            Releases content that was previously initialized by the renderer. 
            This frees all resource that are connected to the given content.
            </summary>
            <param name="image">The image to release.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.InitRenderTarget(OkuBase.Graphics.RenderTarget)">
            <summary>
            Initializes a new rendertarget.
            </summary>
            <param name="target">The render target to be initialized.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetRenderTarget(OkuBase.Graphics.RenderTarget)">
            <summary>
            Activates the given render target. All subsequent draw calls will be drawn to the render target.
            </summary>
            <param name="target">The target to be used or null to switch back to draw to the screen.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.ReleaseRenderTarget(OkuBase.Graphics.RenderTarget)">
            <summary>
            Releases an existing render target.
            </summary>
            <param name="target">The render target to be release.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.Begin">
            <summary>
            Begin drawing a new frame.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.End">
            <summary>
            Drawing the frame is finished and the frame can be presented.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.Clear">
            <summary>
            Clears the screen or render target with the given color.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawImage(OkuBase.Graphics.ImageBase,System.Single,System.Single,System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image at the given position, rotating and scaling it by the given 
            values. The image is tinted with given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <param name="rotation">The rotation angle in degrees.</param>
            <param name="sx">The scale factor on the x axis.</param>
            <param name="sy">The scale factor on the y axis.</param>
            <param name="tint">A color that is used to tint the image with.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawScreenAlignedQuad(OkuBase.Graphics.ImageBase,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image on a screen aligned quad so it fills the whole 
            screen using the given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="tint">The color tint the image with.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a line from start to end with the given width and color.
            </summary>
            <param name="x1">The x coordinate of the start point.</param>
            <param name="y1">The y coordinate of the start point.</param>
            <param name="x2">The x coordinate of the end point.</param>
            <param name="y2">The y coordinate of the end point.</param>
            <param name="width">The width of the line in pixels.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawLines(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and colors.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw the lines with.</param>
            <param name="colors">The colors belonging to the vertices. Has to be same length as vertices.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixels.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawPoint(System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a point at the given point p with the given size and color.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="size">The size of the point in pixels.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawPoints(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single)">
            <summary>
            Draws a series of points at the given vertices with the given size and color.
            </summary>
            <param name="points">The center of the points in world space pixels.</param>
            <param name="colors">The color values belonging to the points. Must be same length as points.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="size">The size of the points in pixels.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.DrawMesh(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,OkuBase.Graphics.PrimitiveType,OkuBase.Graphics.ImageBase)">
            <summary>
            Draws a generic mesh using the given parameters.
            </summary>
            <param name="points">The coordinates of the vertices of the mesh in world space. Must not be null.</param>
            <param name="texCoords">The normalized texture coordinates of the vertices. Must be same length as points. If null, no texture is applied.</param>
            <param name="colors">The colors of the vertices. Must be same length as points. If null, white is used as default color.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="type">The type of primitive used to draw the given vertices.</param>
            <param name="texture">The texture to be applied. If not null, texCoords must also be given.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetViewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the current part of the world that is shown in the display.
            </summary>
            <param name="left">The left bound of the viewport.</param>
            <param name="right">The right bound of the viewport.</param>
            <param name="bottom">The bottom bound of the viewport.</param>
            <param name="top">The top bound of the viewport.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.BeginScreenSpace">
            <summary>
            Set the renderer to screen space mode. In this mode
            all draw calls are done in screen space.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.EndScreenSpace">
            <summary>
            Ends the screen space mode.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetScissorRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a rectangular area of the screen where drawing will happen. 
            Everything outside of the specified area will not be drawn and
            kept form the previous frame.
            The area is specified in display space pixel coordinates and are inclusive.
            </summary>
            <param name="left">The left border of the scissor rectangle.</param>
            <param name="right">The right border of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.ClearScissorRectangle">
            <summary>
            Clear the scissor rectangle so that thw whole screen is redrawn again.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.ApplyAndPushTransform(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Pushes the current transformation onto the stack and applies the given transformation.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="scale">The scale factors.</param>
            <param name="angle">The angle to rotate.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.PopTransform">
            <summary>
            Pops the current transformation from the stack.
            </summary>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.InitShaderProgram(OkuBase.Graphics.ShaderProgram)">
            <summary>
            Initializes the given shader program.
            </summary>
            <param name="program">The shader program to be initialized.</param>
            <returns>True if the program was initialized, false if the program could not be initialized.</returns>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.UseShaderProgram(OkuBase.Graphics.ShaderProgram)">
            <summary>
            Sets the given shader program active. All subsequent draw calls will use this shader.
            To stop using a shader program, pass null to this method.
            </summary>
            <param name="program">The shader program to be used or null to not use any shaders.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetShaderFloat(OkuBase.Graphics.ShaderProgram,System.String,System.Single[])">
            <summary>
            Sets the float variable with the given name to the given value(s).
            CAUTION: This only works if the given program is currently active!
            </summary>
            <param name="program">The program of the shader.</param>
            <param name="name">The name of the variable to set.</param>
            <param name="values">The value(s) to be set.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.SetShaderTexture(OkuBase.Graphics.ShaderProgram,System.String,OkuBase.Graphics.ImageBase)">
            <summary>
            Sets the texture variable with the given name to the given image.
            CAUTION: This only works if the given program is currently active!
            </summary>
            <param name="program">The program of the shader.</param>
            <param name="name">The name of the texture variable.</param>
            <param name="image">The image to set as texture.</param>
        </member>
        <member name="M:OkuBase.Driver.IGraphicsDriver.ReleaseShaderProgram(OkuBase.Graphics.ShaderProgram)">
            <summary>
            Releases the given shader program.
            </summary>
            <param name="program">The shader program to be released.</param>
        </member>
        <member name="P:OkuBase.Driver.IGraphicsDriver.DriverName">
            <summary>
            Gets the name of the driver.
            </summary>
        </member>
        <member name="P:OkuBase.Driver.IGraphicsDriver.Display">
            <summary>
            Gets the control that is used to render.
            This may be a window or some other control in a window.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Mesh">
            <summary>
            Defines a mesh with vertices and an optional texture.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.#ctor">
            <summary>
            Creates a new mesh with no data.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.#ctor(OkuBase.Geometry.Vertices,OkuBase.Graphics.Image,OkuBase.Graphics.PrimitiveType)">
            <summary>
            Creates a new image with the given data.
            </summary>
            <param name="vertices">The vertices of the mesh.</param>
            <param name="texture">The texture to use for the mesh (can be null).</param>
            <param name="type">The type of primitives to form from the vertices.</param>
        </member>
        <member name="M:OkuBase.Geometry.Mesh.ForImage(OkuBase.Graphics.ImageBase,OkuBase.Graphics.Color)">
            <summary>
            Creates a mesh that renders the given image with the given tint color in original size.
            </summary>
            <param name="image">The image to be used.</param>
            <param name="tint">The tint color.</param>
            <returns>The generated mesh.</returns>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.Vertices">
            <summary>
            Gets or sets the vertices of the mesh.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.Texture">
            <summary>
            Gets or sets the texture of the mesh.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Mesh.PrimitiveType">
            <summary>
            Gets or sets the type of primitive that the vertices form for drawing.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.PolygonFactory">
            <summary>
            Defines a set of function to create poylgons.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.PolygonFactory.Box(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an axis aligned box with the given boundaries.
            </summary>
            <param name="left">The left boundary of the box.</param>
            <param name="right">The right boundary of the box.</param>
            <param name="top">The top boundary of the box.</param>
            <param name="bottom">The bottom boundary of the box.</param>
            <returns>The vertices for the box.</returns>
        </member>
        <member name="M:OkuBase.Geometry.PolygonFactory.Circle(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a circle from the given parameters.
            </summary>
            <param name="x">The x coordinate of the center of the circle.</param>
            <param name="y">The y coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="points">The number of vertices of the circle.</param>
            <returns>The vertices for the circle.</returns>
        </member>
        <member name="T:OkuBase.Geometry.Spline">
            <summary>
            Defines a hermite spline in 2D space.
            Usefull tool if arc length parameterization is implemented.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Spline.#ctor(OkuBase.Geometry.Vector2f[])">
            <summary>
            Creates a new spline with the given points.
            </summary>
            <param name="points">The points that will be used for interpolation.</param>
        </member>
        <member name="M:OkuBase.Geometry.Spline.InterpolateHermite(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolates a point on the curve through the given points taking into account the given parameters.
            t gives the position of the point to interpolate. 0 means the start of the curve, 1 means the end of the
            curve. The interpolation is only calulated betwenn the points p1 and p2. p0 and p3 are only use to
            calculate the curvature. So a value of 0 for t actually returns p1 and a value of 1 returns p2. Values between
            0 and 1 return a point on the curve between p1 and p2. 
            </summary>
            <param name="p0">The first point.</param>
            <param name="p1">The second point. This is the point where the curve starts.</param>
            <param name="p2">The third points. This is the point where the curve ends.</param>
            <param name="p3">The fourth point.</param>
            <param name="t">The position parameter. Allowed value range from 0.0 to 1.0.</param>
            <param name="tension">The tension parameter.</param>
            <param name="bias">The bias parameter.</param>
            <param name="continuity">The continuity parameter.</param>
            <returns>The interpolated point at position t between p1 and p2.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Spline.GetInterpolatedPoint(System.Double,OkuBase.Geometry.Vector2f@)">
            <summary>
            Interpolates a point on the spline at position t using the hermite interpolation.
            t ranges from 0.0 to 1.0.
            </summary>
            <param name="t">The position of the point to interpolate. Ranges from 0.0 to 1.0.</param>
            <param name="result">The interpolated point is returned in this ref parameter.</param>
            <returns>true if the point was interpolated correctly or false if the t parameter is out of range.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Spline.GetLength">
            <summary>
            Calculates the arc length of the complete spline. Note that this is only an aproximation and not the 100% correct length.
            But it should be enough for most purposes especialy games.
            </summary>
            <returns>The aproximated arc-length of the spline.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Spline.Tesselate(System.Int32)">
            <summary>
            Tesselates the spline into a polygon. Note that the points of the polygon are not evenly spread over the spline
            due to the non-linear nature of the hermite spline. If you need the points to be evenly spread 
            (for example for moving something along the spline at a constant speed) use the TesselateParameterized()
            method which is in return slower due to more complex math involved.
            </summary>
            <param name="points">Specifies how many points the resulting polygon will have.</param>
            <returns>The tesselated polygon.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Spline.GetParameterizedInterpolatedPoint(System.Double,OkuBase.Geometry.Vector2f@)">
            <summary>
            Interpolates a point on the spline at the given control value t.
            The spline is parameterized  to linear length so a control value of 0.5
            is garantueed to return a point that half way down the spline.
            </summary>
            <param name="t">The linear control value. Must be in range 0.0 - 1.0.</param>
            <param name="result">The interpolated point is returned here.</param>
            <returns>True if the point was interpolated, false if the control parameter t was out of range 0.0 - 1.0.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Spline.TesselateParameterized(System.Int32)">
            <summary>
            Tesselates the spline to a polygon. The points are evenly spread on the spline
            at even distances-
            </summary>
            <param name="points">The number of points the tesselated spline should have.</param>
            <returns>The points of the tesselated polygon.</returns>
        </member>
        <member name="P:OkuBase.Geometry.Spline.Points">
            <summary>
            Gets or sets the points that are used for interpolation.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Spline.Tension">
            <summary>
            Gets or sets how much of the points tension is applied to the interpolated curve. Ranges from 0.0...1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Spline.Bias">
            <summary>
            Gets or sets how much of the points bias is applied to the interpolated curve. Ranges from 0.0...1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Spline.Continuity">
            <summary>
            Gets or sets how much of the points continuity is applied to the interpolated curve. Ranges from 0.0...1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Spline.ArcLengthMap">
            <summary>
            Gets a map that translates from linear length to arc length.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Rectangle2f">
            <summary>
            Defines an axis alligned box by its min and max vectors.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Rectangle2f.Min">
            <summary>
            The min vector.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Rectangle2f.Max">
            <summary>
            The max vector.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.#ctor(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Create a new quad with the given vectors.
            </summary>
            <param name="min">The min vector.</param>
            <param name="max">The max vector.</param>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new quad with the given values.
            </summary>
            <param name="left">The left border of the quad.</param>
            <param name="right">The right border of the quad.</param>
            <param name="top">The top border of the quad.</param>
            <param name="bottom">The bottom border of the quad.</param>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints">
            <summary>
            Gets the four corner points of the AABB as a vector array.
            </summary>
            <returns>The four corner points in an array.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints(OkuBase.Geometry.Vector2f[])">
            <summary>
            Returns the corner points of the bounding box in the given array
            which must have a length >= 4. Only the first four entries (0-3) are filled.
            </summary>
            <param name="points">The array to put in the points.</param>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.IsInside(OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the given point is inside of the AABB.
            </summary>
            <param name="point">The point to check.</param>
            <returns>True if the point is inside the AABB, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.Add(OkuBase.Geometry.Rectangle2f)">
            <summary>
            Calculates a bounding box that contains
            both this and the given AABB.
            </summary>
            <param name="other">The bounding box to add.</param>
            <returns>A new AABB that contains this and the given AABB.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.Split(System.Int32,System.Int32)">
            <summary>
            Splits the AABB into the given amount of vertical and horizontal cells.
            </summary>
            <param name="vertical">The number of vertical cells.</param>
            <param name="horizontal">The number of horizontal cells.</param>
            <returns>An array containing the split AABBs in the order from left-bottom to right top.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.GetPoints(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Gets the four corner points of the AABB as a vector array.
            </summary>
            <param name="min">The minimum vector of the AABB.</param>
            <param name="max">The maximum vector of the AABB.</param>
            <returns>The four corner points in an array.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Rectangle2f.ToString">
            <summary>
            Converts the AABB to string in the format "minX,minY;maxX,maxY".
            </summary>
            <returns>The AABB as a string in the format "minX,minY;maxX,maxY".</returns>
        </member>
        <member name="P:OkuBase.Geometry.Rectangle2f.Width">
            <summary>
            Gets the width of the quad.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Rectangle2f.Height">
            <summary>
            Gets the height of the quad.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Vertices">
            <summary>
            Contains different data about a set of vertices.
            The vertices are expressed by three separate array,
            one for each the vertex positions, texture coordinates and colors.
            The texture coordinates and colors may be set to null if not needed.
            The arrays are expected, but not forced, to be the same length.
            Use the Valid property to check if all non-null arrays have the same length. 
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor">
            <summary>
            Creates a new vertex content with no data.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuBase.Geometry.Vector2f[])">
            <summary>
            Creates a new vertex content with the given positions.
            </summary>
            <param name="positions">The vertex positions.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[])">
            <summary>
            Creates a new vertex content with the given positions and texture coordinates.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="texCoords">The vertex texture coordinates.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[])">
            <summary>
            Creates a new vertex content with the given positions and color.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="colors">The vertex colors.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vertices.#ctor(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[])">
            <summary>
            Creates a new vertex content with the given positions, texture coordinates and colors.
            </summary>
            <param name="positions">The vertex positions.</param>
            <param name="texCoords">The vertex texture coordinates.</param>
            <param name="colors">The vertex colors.</param>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Positions">
            <summary>
            Gets or set the array of positions of the vertices.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.TexCoords">
            <summary>
            Gets or set the array of texture coordinates of the vertices.
            Can be set to null if not needed.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Colors">
            <summary>
            Gets or set the array of colors of the vertices.
            Can be set to null if not needed.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Count">
            <summary>
            Gets the number of vertices.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vertices.Valid">
            <summary>
            Gets if the vertex content is valid.
            It is valid if the Positions array is not null and
            all non-null arrays have the same length.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.Vector2f">
            <summary>
            Vector defines a two dimensional Vector with all standard vector math routines.
            The + and - operators have been overloaded to add / subtract two vectors. The
            * operator is overloaded to scale a vector by a float value.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vector2f.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vector2f.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vector2f.Zero">
            <summary>
            A vector with X and Y set to 0.
            </summary>
        </member>
        <member name="F:OkuBase.Geometry.Vector2f.One">
            <summary>
            A vector with X and Y set to 1.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Vector and initializes X and Y with the given values.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Add(OkuBase.Geometry.Vector2f)">
            <summary>
            Adds the values of the given vector to this vector.
            </summary>
            <param name="other">The vector to be added.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Subtract(OkuBase.Geometry.Vector2f)">
            <summary>
            Subtracts the values of the given vector from this vector.
            </summary>
            <param name="other">The vector to be subtracted.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Normalize">
            <summary>
            Normalizes this Vector. That is, X and Y are scaled so the magnitude of the vector is 1.0.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Scale(System.Single)">
            <summary>
            Scales the components of this vector by the given factor.
            </summary>
            <param name="factor">The scaling factor.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.DotProduct(OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the dot/scalar product of this and the given vector.
            NOTE: The vectors have to normalized!
            </summary>
            <param name="other">The other vector.</param>
            <returns>The dot/scalar product of the two vectors.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Addition(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Adds the components of the two given vectors and returns the result.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new vector with the result of the addition.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Subtraction(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Subtracts the components of the two given vectors and returns the result.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new vector with the result of the subtraction.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_UnaryNegation(OkuBase.Geometry.Vector2f)">
            <summary>
            Inverts the components of the given vector.
            </summary>
            <param name="vec">The vector to be inverted.</param>
            <returns>The inverted vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Multiply(OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Scales the given vectors components by the given multiplier.
            </summary>
            <param name="vec">The vector to be multiplied.</param>
            <param name="mul">The multiplier.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Multiply(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Multiplies the two given vectors component-wise (X1 * X2 and Y1 * Y2).
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>The result of the multiplication as a new vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Division(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Divides the two given vectors component-wise (X1 / X2 and Y1 / Y2).
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>The result of the division as a new vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Division(OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Divides the components of the given vector by the given value.
            </summary>
            <param name="vec">The vector.</param>
            <param name="value">The dividend.</param>
            <returns>The result of the division as a new vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Equality(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the two vectors are equal.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>True if the vectors are equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.op_Inequality(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the two vectors are not equal.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>True if the vectors are not equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Normalize(OkuBase.Geometry.Vector2f)">
            <summary>
            Normalizes the given vector and returns the result as a new vector.
            </summary>
            <param name="vec">The vector to be normalized.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.DotProduct(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the dot/scalar product of the two given vectors.
            NOTE: The vectors have to be normalized!
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>The dot/scalar product of the two given vectors.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Distance(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the distance between two points given by the two vectors.
            </summary>
            <param name="vec1">The first point.</param>
            <param name="vec2">The second point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Assign(OkuBase.Geometry.Vector2f)">
            <summary>
            Assigns the X and Y values of the given vector to this vector.
            </summary>
            <param name="vec">The vector to assign to this vector.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.ToString">
            <summary>
            Creates a string representation of the vector in the format "X,Y".
            </summary>
            <returns>A string representation of the vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Equals(OkuBase.Geometry.Vector2f)">
            <summary>
            Compares the vector to another vector by comparing the X and Y values.
            </summary>
            <param name="other">The vector to compare to.</param>
            <returns>True if the vectors are equal, else False.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Rotate(System.Single)">
            <summary>
            Rotates the vector around the origin by the given angle. Positive angles
            mean clockwise rotation, negative values mean counter-clockwise rotation.
            </summary>
            <param name="angle">The angle to rotate in degrees.</param>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Rotate(OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Rotates the given vector by the given angle. The result
            is returned as a new vector. The given vector is not changed.
            Positive angles mean clockwise rotation, negative values mean
            counter-clockwise rotation.
            </summary>
            <param name="vec">The vector to be rotated.</param>
            <param name="angle">The angle to rotate in degrees.</param>
            <returns>The result of the rotation in a new vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Project(OkuBase.Geometry.Vector2f)">
            <summary>
            Project the given vector to this vector.
            </summary>
            <param name="other">The vector to be projected.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.ProjectScalar(OkuBase.Geometry.Vector2f)">
            <summary>
            Projects the given vector to this vector.
            </summary>
            <param name="other">The vector to be projected.</param>
            <returns>The 1d scalar projecetd value.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.FromPoints(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Creates a new vector between the given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The new, unnormalized vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.FromPoints(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new vector between the points represented by the given coordinates.
            </summary>
            <param name="x1">The x component of the first point.</param>
            <param name="y1">The y component of the first point.</param>
            <param name="x2">The x component of the second point.</param>
            <param name="y2">The y component of the second point.</param>
            <returns>The new, unnormalized vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.GetNormal">
            <summary>
            Calculates the left hand normal of the vector.
            </summary>
            <returns>The normalized left hand vector of the vector.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.IsZero">
            <summary>
            Checks if the vector has a length of zero (= both components are zero).
            </summary>
            <returns>True if the vector is zero length, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.TryParse(System.String,OkuBase.Geometry.Vector2f@)">
            <summary>
            Tries to parse the given string into a vector.
            The string is expected to be in the format "X,Y"
            like it is created by the ToString method.
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="vec">The aprsed vector is returned here.</param>
            <returns>True if the str was parsed successfully, False if the 
            given string is null or has a wrong format.</returns>
        </member>
        <member name="M:OkuBase.Geometry.Vector2f.Equals(System.Object)">
            <summary>
            Checks if the two vectors are equal.
            </summary>
            <param name="obj">The other vector.</param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="P:OkuBase.Geometry.Vector2f.Magnitude">
            <summary>
            Gets the magnitude (length) of the vector by using the pythogarean theorem.
            </summary>
        </member>
        <member name="P:OkuBase.Geometry.Vector2f.SquaredMagnitude">
            <summary>
            Gets the squared length of the vector. This is not the real length but can be used for comparison
            as it is faster to calculate.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.Color">
            <summary>
            Stores a color value in RGBA format.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new opaque color with the given color values.
            </summary>
            <param name="red">The red amount of the color.</param>
            <param name="green">The green amount of the color.</param>
            <param name="blue">The blue amount of the color.</param>
        </member>
        <member name="M:OkuBase.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color with the given color values and alpha value.
            </summary>
            <param name="red">The red amount of the color.</param>
            <param name="green">The green amount of the color.</param>
            <param name="blue">The blue amount of the color.</param>
            <param name="alpha">The alpha transparency where 0 means completely transparent and 1 means opaque.</param>
        </member>
        <member name="M:OkuBase.Graphics.Color.Equals(OkuBase.Graphics.Color)">
            <summary>
            Compares this color with the given color.
            </summary>
            <param name="other">The color to compare with.</param>
            <returns>True if the two colors R, G, B and A values are equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.EqualsColor(OkuBase.Graphics.Color)">
            <summary>
            Compares this color with the given one without checking the Alpha component.
            </summary>
            <param name="other">The color to compare with.</param>
            <returns>True if the two colors R, G and B values are equal, else false.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetBrightness">
            <summary>
            Calculates the objective brightness of the color.
            </summary>
            <returns>The brightness in the range [0.0 - 255,0]</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetPerceivedBrightness">
            <summary>
            Calculates the brightness of the color like
            perceived by the human eye. Note that this is
            sdarker than <code>GetBrightness</code>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.ToString">
            <summary>
            Converts the color into a string in the HTML color format "#RRGGBBAA".
            </summary>
            <returns>The color as a string.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.Blend(OkuBase.Graphics.Color,OkuBase.Graphics.Color,System.Single)">
            <summary>
            Blends the to given colors by the given ratio.
            </summary>
            <param name="col1">The first color.</param>
            <param name="col2">The second color.</param>
            <param name="ratio">The mixing ration. Must be in the range [0.0 - 1.0]. 0.0 means col1, 1.0 col2.</param>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.GetContrastColor(OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color)">
            <summary>
            Gets the color that has more contrast on backgroundColor.
            </summary>
            <param name="backgroundColor">The color of the background.</param>
            <param name="bright">A bright color for dark backgrounds.</param>
            <param name="dark">A dark color for bright backgrounds.</param>
            <returns>Either the bright color or the dak color, depending on the brightness of the background color.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.Parse(System.String)">
            <summary>
            Tries to parse the given string into a color.
            The string is expected to be in the typical
            hexadecimal HTML color format (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
            </summary>
            <param name="str">The string representation of the color.</param>
            <returns>The parsed color.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Color.TryParse(System.String,OkuBase.Graphics.Color@)">
            <summary>
            Tries to parse the given string into a color.
            The string is expected to be in the typical
            hexadecimal HTML color format (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
            </summary>
            <param name="str">The string representation of the color.</param>
            <param name="color">The parsed color is returend here if the method returns true.</param>
            <returns>True if the given string could be parsed to a color, else false.</returns>
        </member>
        <member name="T:OkuBase.Graphics.Display">
            <summary>
            Handles getting and setting display modes.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Display.#ctor">
            <summary>
            Creates a new display handler.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Display.GetSupportedModes">
            <summary>
            Gets all displaymodes that are supported by the current graphics device - monitor - combination.
            </summary>
            <returns>A list of all supported display modes.</returns>
        </member>
        <member name="M:OkuBase.Graphics.Display.SetDisplayMode(OkuBase.Graphics.DisplayMode)">
            <summary>
            Sets the given display mode. Throws an exception if an error occurrs while doing so.
            </summary>
            <param name="mode">The display mode to be set.</param>
        </member>
        <member name="P:OkuBase.Graphics.Display.CurrentMode">
            <summary>
            Gets the display mode that is currently set.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.DisplayMode">
            <summary>
            Specifies a display mode with resolution, display frequency, bits per pixel and display orientation.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.#ctor">
            <summary>
            Creates a new default display mode with resolution 800x600, display frequency 60Hz and 32 bits per pixel.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new display mode with the given settings.
            </summary>
            <param name="width">The horizontal resolution in pixels.</param>
            <param name="height">The vertical resolution in pixels.</param>
            <param name="frequency">The display frequency.</param>
            <param name="bitsPerPixel">The number of color bits per pixel.</param>
            <param name="orientation">The orientation of the display.</param>
        </member>
        <member name="M:OkuBase.Graphics.DisplayMode.ToString">
            <summary>
            Creates a string representation of the display mode.
            </summary>
            <returns>A string representation of the display mode.</returns>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Width">
            <summary>
            Gets or sets the horizontal resolution of the display in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Height">
            <summary>
            Gets or sets the vertical resolution of the display in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Frequency">
            <summary>
            Gets or sets the display refresh frequency in Hertz.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.BitsPerPixel">
            <summary>
            Gets or sets the number of color bits per pixel. Allowed values are 8, 16,24 and 32.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.DisplayMode.Orientation">
            <summary>
            Gets or sets the display orientation in degrees. Allowed values are 0 and 90.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Id">
            <summary>
            Gets the unique id of this image.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageBase.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.OnScreenConsole">
            <summary>
            Defines an on-screen console that is drawn as an overlay over the game.
            The console needs to receive keyboard input to work. Therefore it must be
            set as the current input handler.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.OnScreenConsole.#ctor">
            <summary>
            Creates a new console with a default font.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.OnScreenConsole.#ctor(OkuBase.Graphics.SpriteFont)">
            <summary>
            Creates a new console with the given font.
            </summary>
            <param name="font">The font to use to display text.</param>
        </member>
        <member name="M:OkuBase.Graphics.OnScreenConsole.AddLine(System.String)">
            <summary>
            Adds the given new line to the console.
            </summary>
            <param name="line">The new line.</param>
        </member>
        <member name="M:OkuBase.Graphics.OnScreenConsole.Draw">
            <summary>
            Draws the console on the screen. This should be called in the Render method
            after everything else has been drawn.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.OnScreenConsole.Height">
            <summary>
            Gets or sets the height of the console in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.OnScreenConsole.Font">
            <summary>
            Gets or set the font that is used to render text.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.OnScreenConsole.Active">
            <summary>
            Gets or sets if the console is currently active. An active console
            processes keyboard events, an inactive one does not.
            </summary>
        </member>
        <member name="E:OkuBase.Graphics.OnScreenConsole.OnCommandEntered">
            <summary>
            Is triggered when the user enters a command and hits the enter key.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.PrimitiveType">
            <summary>
            Defines the draw mode for raw vertex data.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.None">
            <summary>
            Do not draw anything.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Points">
            <summary>
            Draw a point at each vertex.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Lines">
            <summary>
            Draw one line for each pair of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Polygon">
            <summary>
            Draw a polygon starting at the first vertex and ending at the last.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.ClosedPolygon">
            <summary>
            Draw a polygon starting at the first vertex the the last one and also draw a line from the last to the first.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Triangles">
            <summary>
            Draw a single triangle for each triplet of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            Draws a triangle strip.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.TriangleFan">
            <summary>
            Draws a triangle fan.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.Quads">
            <summary>
            Draws a quad for each quarttet of vertices.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.PrimitiveType.QuadStrip">
            <summary>
            Draw a quad strip.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            Converts the given screen pixel coordinates to display client coordinates.
            The origin for these coordinates is in the lower left corner.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The client space coordinates of the given pixel. Note that this can be outside of the window in windowed mode.</returns>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ScreenToWorld(System.Int32,System.Int32)">
            <summary>
            Converts the given screen pixel coordinates to world coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The world space coordinates of the given pixel. Note that this can be outside of the window in windowed mode.</returns>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.SetScissorRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a rectangular area of the screen where drawing will happen. 
            Everything outside of the specified area will not be drawn and
            kept form the previous frame.
            The area is specified in display space pixel coordinates and are inclusive.
            </summary>
            <param name="left">The left border of the scissor rectangle.</param>
            <param name="right">The right border of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ClearScissorRectangle">
            <summary>
            Clear the scissor rectangle so that thw whole screen is redrawn again.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.Clear">
            <summary>
            Clears the screen or current render target with the current background color.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawImage(OkuBase.Graphics.ImageBase,System.Single,System.Single,System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image at the given position, rotating and scaling it by the given 
            values. The image is tinted with given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <param name="rotation">The rotation angle in degrees.</param>
            <param name="sx">The scale factor on the x axis.</param>
            <param name="sy">The scale factor on the y axis.</param>
            <param name="tint">A color that is used to tint the image with.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawImage(OkuBase.Graphics.ImageBase,System.Single,System.Single)">
            <summary>
            Draws the given image at the given position.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawImage(OkuBase.Graphics.ImageBase,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image at the given position. The image is tinted with given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <param name="tint">A color that is used to tint the image with.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawScreenAlignedQuad(OkuBase.Graphics.ImageBase,OkuBase.Graphics.Color)">
            <summary>
            Draws the given image on a screen aligned quad so it fills the whole 
            screen using the given tint color.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="tint">The color tint the image with.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawScreenAlignedQuad(OkuBase.Graphics.ImageBase)">
            <summary>
            Draws the given image on a screen aligned quad so it fills the whole screen.
            </summary>
            <param name="image">The image to be drawn.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a line from start to end with the given width and color.
            </summary>
            <param name="x1">The x coordinate of the start point.</param>
            <param name="y1">The y coordinate of the start point.</param>
            <param name="x2">The x coordinate of the end point.</param>
            <param name="y2">The y coordinate of the end point.</param>
            <param name="width">The width of the line in pixels.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLines(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and colors.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw the lines with.</param>
            <param name="colors">The colors belonging to the vertices. Has to be same length as vertices.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixels.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawLines(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color,System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and color.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw the lines with.</param>
            <param name="color">The color of the all lines.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixels.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawPoint(System.Single,System.Single,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a point at the given point p with the given size and color.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="size">The size of the point in pixels.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawPoints(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,System.Single)">
            <summary>
            Draws a series of points at the given vertices with the given size and color.
            </summary>
            <param name="points">The center of the points in world space pixels.</param>
            <param name="colors">The color values belonging to the points. Must be same length as points.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="size">The size of the points in pixels.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.DrawMesh(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,OkuBase.Graphics.PrimitiveType,OkuBase.Graphics.ImageBase)">
            <summary>
            Draws a generic mesh using the given parameters.
            </summary>
            <param name="points">The coordinates of the vertices of the mesh in world space. Must not be null.</param>
            <param name="texCoords">The normalized texture coordinates of the vertices. Must be same length as points. If null, no texture is applied.</param>
            <param name="colors">The colors of the vertices. Must be same length as points. If null, white is used as default color.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="type">The type of primitive used to draw the given vertices.</param>
            <param name="texture">The texture to be applied. If not null, texCoords must also be given.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.ApplyAndPushTransform(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Pushes the current transformation onto the stack and applies the given transformation.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="scale">The scale factors.</param>
            <param name="angle">The angle to rotate.</param>
        </member>
        <member name="M:OkuBase.Graphics.GraphicsManager.PopTransform">
            <summary>
            Pops the current transformation from the stack.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.Title">
            <summary>
            Gets or sets the title of the display.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.DisplayWidth">
            <summary>
            Gets the width of the current display in pixels.
            This is either the window or the current render target.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.GraphicsManager.DisplayHeight">
            <summary>
            Gets the height of the current display in pixels.
            This is either the window or the current render target.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.Image">
            <summary>
            Defines a single image.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor">
            <summary>
            Creates a new empty image with no pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor(OkuBase.Graphics.ImageData)">
            <summary>
            Creates a new image with the given pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
            <param name="data">The pixel data of the new image.</param>
        </member>
        <member name="M:OkuBase.Graphics.Image.#ctor(OkuBase.Graphics.ImageData,System.Boolean)">
            <summary>
            Creates a new image with the given pixel data.
            Do not use directly. Use Graphics.NewImage().
            </summary>
            <param name="data">The pixel data of the new image.</param>
            <param name="isCompressed">Determines if the image is compressed or not.</param>
        </member>
        <member name="P:OkuBase.Graphics.Image.IsCompressed">
            <summary>
            Gets if the image is compressed or not.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.Image.ImageData">
            <summary>
            Gets the raw image pixel data of the image.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.ImageData">
            <summary>
            Defines the pixel data for an image. The pixel data can be read and manipulated.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new image data with the given width and height.
            </summary>
            <param name="width">The width of the image data in pixels.</param>
            <param name="height">The height of the image data in pixels.</param>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates new image data with the given width and height and pixel data.
            </summary>
            <param name="width">The width of the image data in pixels.</param>
            <param name="height">The height of the image data in pixels.</param>
            <param name="pixelData">The pixel data of the new image data.</param>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.IndexOfPixel(System.Int32,System.Int32)">
            <summary>
            Calculates the index of the pixel with the given, zero based x and y coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The index of the pixel in the _pixelData array.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the given, zero based coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at the given coordinates.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.SetPixelColor(System.Int32,System.Int32,OkuBase.Graphics.Color)">
            <summary>
            Sets the color of the pixel at the given, zero based coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.ToBitmap">
            <summary>
            Converts the image data to a Bitmap.
            </summary>
            <returns>The bitmap for the image data.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates new image data from the given bitmap.
            </summary>
            <param name="bitmap">The bitmap to read the pixel data from.</param>
            <returns>The image data version of the bitmap.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromFile(System.String)">
            <summary>
            Creates new image data from the given image file.
            </summary>
            <param name="filename">The path of the image file.</param>
            <returns>The image data of the image file.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromStream(System.IO.Stream)">
            <summary>
            Creates new image data from the given stream.
            The stream is expected to contain a complete image file.
            </summary>
            <param name="stream">The stream with image data.</param>
            <returns>The image data of the stream.</returns>
        </member>
        <member name="M:OkuBase.Graphics.ImageData.FromRaw(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates new image data with the given width, height and raw pixel data.
            The bytes of the ints are expected to have the order BGRA.
            The first pixel is expected to be the one in the bottom left corner.
            </summary>
            <param name="rawData">The raw pixel data.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The image data.</returns>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.Width">
            <summary>
            Gets the width of the image data in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.Height">
            <summary>
            Gets the height of the image data in pixels.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ImageData.PixelData">
            <summary>
            Gets the raw internal pixel data array.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.SpriteFont.GetTextWidth(System.String)">
            <summary>
            Gets the width of the given text in world units.
            </summary>
            <param name="text">The text.</param>
            <returns>The width of the text.</returns>
        </member>
        <member name="M:OkuBase.Graphics.SpriteFont.GetTextWidth(System.String,System.Int32)">
            <summary>
            Gets the width of the first count character of text
            in world units.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The number of characters.</param>
            <returns>The width of the first count charaters.</returns>
        </member>
        <member name="T:OkuBase.Graphics.SpriteFont.CharDimensions">
            <summary>
            Used internally to store character dimensions. The values are represented in texture pixel space.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.TextProcessor">
            <summary>
            A simple text processing engine. It is driven by passing
            the keys that are pressed on the keyboard to its ProcessKey
            method.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.#ctor">
            <summary>
            Creates a new text processor.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.GetCursorPosition(System.Int32@,System.Int32@)">
            <summary>
            Calculates the line and character position
            of the corsur in a multiline text processor.
            </summary>
            <param name="line">The line index is returned here.</param>
            <param name="character">The character index in the line is returned here.</param>
        </member>
        <member name="M:OkuBase.Graphics.TextProcessor.ProcessKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a key stroke and updates the text and cursor position accordingly.
            </summary>
            <param name="key">The key that was pressed.</param>
            <returns>True if the text was changed by processing the key, else false.</returns>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.CursorPosition">
            <summary>
            Gets or set the current position of the cursor.
            This is the character index in the text string
            and does not handle line breaks.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.TextProcessor.Multiline">
            <summary>
            Gets or sets if multiple lines can be entered.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.TextureFilter">
            <summary>
            Defines methods for texture filtering.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.TextureFilter.NearestNeighbor">
            <summary>
            Nearest neighbor interpolation using Manhattan Distance.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.TextureFilter.Linear">
            <summary>
            Linear Interpolation.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.LineMode">
            <summary>
            Defines how vertices should be interpreted.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.Polygon">
            <summary>
            Draws a polygon ffrom the vertices where the first and the last vertex are not connected.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.PolygonClosed">
            <summary>
            Draws a polygon from the vertices where the first and the last vertex are connected too.
            </summary>
        </member>
        <member name="F:OkuBase.Graphics.LineMode.LineSegments">
            <summary>
            Draws a line segment for each pair of vertices.
            </summary>
        </member>
        <member name="T:OkuBase.Graphics.ViewPortChangeEventHandler">
            <summary>
            Specified the delegate for a viewport change event handler. Should only be implemented by the Renderer.
            </summary>
            <param name="sender">The view port that fired the change event.</param>
        </member>
        <member name="T:OkuBase.Graphics.ViewPort">
            <summary>
            Species the part of the world space that is currently shown on screen.
            </summary>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new viewport centered at the world space coordinate (0,0)
            and width the given width and height.
            </summary>
            <param name="width">The width of the viewport in world space units.</param>
            <param name="height">The height of the viewport in world space units.</param>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new viewport with the given boundaries.
            The boundaries are inclusive.
            </summary>
            <param name="left">The left bound of the viewport.</param>
            <param name="top">The top bound of the viewport.</param>
            <param name="right">The right bound of the viewport.</param>
            <param name="bottom">The bottom bound of the viewport.</param>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.OnChange(OkuBase.Graphics.ViewPort)">
            <summary>
            Is called when any of the viewport parameters is changed.
            </summary>
            <param name="sender">The viewport that triggered the event.</param>
        </member>
        <member name="M:OkuBase.Graphics.ViewPort.Contains(OkuBase.Geometry.Vector2f)">
            <summary>
            Check if the given point is inside of the viewport.
            </summary>
            <param name="p">The point to check.</param>
            <returns>True if the point is inside the viewport, else False.</returns>
        </member>
        <member name="E:OkuBase.Graphics.ViewPort.Change">
            <summary>
            Event that is triggered when any parameter of the viewport is changed.
            The renderer should listen to this event and change the view of the scene
            accordingly.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Center">
            <summary>
            Gets or sets the center of the viewport.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Left">
            <summary>
            Gets or sets the left border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Top">
            <summary>
            Gets or sets the top border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Right">
            <summary>
            Gets or sets the right border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Bottom">
            <summary>
            Gets or sets the bottom border of the viewport taking into account scale.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Width">
            <summary>
            Gets the width of the viewport in world space units.
            </summary>
        </member>
        <member name="P:OkuBase.Graphics.ViewPort.Height">
            <summary>
            Gets the height of the viewport in world space units.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.ButtonWidget">
            <summary>
            Defines a widget in the form of a button that can be clicked.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.Widget">
            <summary>
            Base class for all widgets.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.AreaChange">
            <summary>
            Is called when the area of the widget changes.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.PointToClient(OkuBase.Geometry.Vector2f)">
            <summary>
            Computes the location of the given display space point in client (widget) space.
            </summary>
            <param name="point">The display space point to convert.</param>
            <returns>The location of the given display space point in client space.</returns>
        </member>
        <member name="M:OkuBase.GUI.Widget.PointToDisplay(OkuBase.Geometry.Vector2f)">
            <summary>
            Computes the location of the given client point in display space.
            </summary>
            <param name="point">The client space point to convert.</param>
            <returns>The location of the given client space point in display space.</returns>
        </member>
        <member name="M:OkuBase.GUI.Widget.Update(System.Single)">
            <summary>
            Is called every frame to enable widgets to do animations.
            </summary>
            <param name="dt">The time passed since the last frame in seconds.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.Render(OkuBase.GUI.Canvas)">
            <summary>
            Is called when the widget has to render itself.
            <param name="canvas">The drawing canvas the widget can draw to.</param>
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.MouseEnter">
            <summary>
            Is called when the mouse cursor enters the area of the widget.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.MouseLeave">
            <summary>
            Is called when the mouse cursor leaves the area of the widget.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.MouseDown(OkuBase.Input.MouseButton)">
            <summary>
            Is called when the mouse cursor is in the widgets area and 
            a mouse button is pressed down.
            </summary>
            <param name="button">The mouse button that was pressed.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.MouseUp(OkuBase.Input.MouseButton)">
            <summary>
            Is called when the mouse cursor is in the widgets area and 
            a mouse button is raised up.
            </summary>
            <param name="button">The mouse button that was raised.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.MouseWheel(System.Single)">
            <summary>
            Is called when the mouse wheel was scrolled up or down.
            </summary>
            <param name="delta">Determines how far the wheel has been scrolled in which direction. Positive means forward, Negative means backwards scrolling.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.KeyDown(System.Windows.Forms.Keys)">
            <summary>
            Is called when the widget is focused and a keyboard key is pressed.
            </summary>
            <param name="key">The key that was pressed.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.KeyUp(System.Windows.Forms.Keys)">
            <summary>
            Is called when the widget is focused and a keyboard key is raised up.
            </summary>
            <param name="key">The key that was raised.</param>
        </member>
        <member name="M:OkuBase.GUI.Widget.Activate">
            <summary>
            Is called when the widget is activated.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.Deactivate">
            <summary>
            Is called when the widget is deactivated.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.Focus">
            <summary>
            Is called when the widget is focused.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.Unfocus">
            <summary>
            Is called when the widget is unfocused.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Widget.Init">
            <summary>
            Is called once when the widget is added to the container.
            The container property is set when this method is called.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.Container">
            <summary>
            Gets os sets the widget container this widget belongs to.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.Area">
            <summary>
            Gets or sets the area of the widget.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.HintText">
            <summary>
            Gets or sets the text that is displayed in the hint.
            Null means: display no hint.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.Visible">
            <summary>
            Gets or sets if the widget is visible or not.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.MousePosition">
            <summary>
            Gets the current mouse position in client space.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.Widget.ID">
            <summary>
            Gets a unique artificial ID for this widget.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ButtonWidget.Init">
            <summary>
            Initializes the button after it has been added to a container.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ButtonWidget.Update(System.Single)">
            <summary>
            Updates the buttons state.
            </summary>
            <param name="dt">The time passed since the last frame.</param>
        </member>
        <member name="M:OkuBase.GUI.ButtonWidget.Refresh">
            <summary>
            Refreshes text and recalculates glyph and text positions if needed.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ButtonWidget.Render(OkuBase.GUI.Canvas)">
            <summary>
            Renders the button depending on its state.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ButtonWidget.Text">
            <summary>
            The text to display on the button.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ButtonWidget.Glyph">
            <summary>
            Gets or sets an icon image that is displayed on the button left to the text.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ButtonWidget.Clicked">
            <summary>
            Gets if the button was clicked.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.Canvas">
            <summary>
            Used to draw to a specific rectangle area in display space.
            The area to be used is given in the Area property.
            All drawing is clipped to the drawing area.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.Canvas.#ctor(OkuBase.Geometry.Rectangle2f)">
            <summary>
            Creates a new Canvas with the given area.
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.FillRect(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Graphics.Color)">
            <summary>
            Fills the area defined by the given vectors.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawMesh(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color[],System.Int32,OkuBase.Graphics.PrimitiveType,OkuBase.Graphics.ImageBase)">
            <summary>
            Draws a generic mesh using the given parameters.
            </summary>
            <param name="points">The coordinates of the vertices of the mesh in world space. Must not be null.</param>
            <param name="texCoords">The normalized texture coordinates of the vertices. Must be same length as points. If null, no texture is applied.</param>
            <param name="colors">The colors of the vertices. Must be same length as points. If null, white is used as default color.</param>
            <param name="count">The number of points to draw from the given array.</param>
            <param name="mode">The mode used to create polygons from the given vertices.</param>
            <param name="texture">The texture to be applied. If not null, texCoords must also be given.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawMesh(OkuBase.Geometry.Mesh)">
            <summary>
            Draws the given mesh instance.
            </summary>
            <param name="mesh">The mesh to be drawn.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawImage(OkuBase.Graphics.ImageBase,OkuBase.Geometry.Vector2f)">
            <summary>
            Draws the given image content at the given position.
            </summary>
            <param name="content">The content to be drawn.</param>
            <param name="position">The position to draw the image to in screen space pixels.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawLine(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a line from start to end with the given width and color.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <param name="width">The width of the line in pixels.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawLines(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color,System.Int32,System.Single,OkuBase.Graphics.LineMode)">
            <summary>
            Draws a series of lines using the given vertices with the given width and color.
            How the vertices are interpreted is specified by interpretation.
            </summary>
            <param name="vertices">The vertices to draw lines with.</param>
            <param name="color">The color of the lines.</param>
            <param name="count">The number of lines to draw from the given array.</param>
            <param name="width">The width of the lines in pixel.</param>
            <param name="interpretation">Specifies how to interpret the vertices.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawPoint(OkuBase.Geometry.Vector2f,System.Single,OkuBase.Graphics.Color)">
            <summary>
            Draws a point at the given point p with the given size and color.
            </summary>
            <param name="p">The center of the point in world space pixels.</param>
            <param name="size">The size of the point in pixels.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:OkuBase.GUI.Canvas.DrawPoints(OkuBase.Geometry.Vector2f[],OkuBase.Graphics.Color,System.Int32,System.Single)">
            <summary>
            Draws a point at every position in the given points array.
            </summary>
            <param name="points">The points to draw.</param>
            <param name="color">The color of the points.</param>
            <param name="count">The number of points to draw.</param>
            <param name="size">The size in pixels of the points.</param>
        </member>
        <member name="P:OkuBase.GUI.Canvas.Area">
            <summary>
            Gets or sets the drawing area.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.ColorMap">
            <summary>
            Defines a color map for a widget container.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ColorMap.#ctor">
            <summary>
            Creates a new color map where all colors are black.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ColorMap.#ctor(OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color,OkuBase.Graphics.Color)">
            <summary>
            Creates a new color map with the givne colors.
            </summary>
            <param name="backGround">The color for the background.</param>
            <param name="widgetDark">The dark color for widgets.</param>
            <param name="widgetLight">The light color for widgets.</param>
            <param name="hotDark">The dark color for hot widgets.</param>
            <param name="hotLight">The light color for hot widgets.</param>
            <param name="activeDark">The dark color for active widgets.</param>
            <param name="activeLight">The light color for active widgets.</param>
            <param name="borderDark">The dark color for widget borders.</param>
            <param name="borderLight">The light color for widget borders.</param>
            <param name="fontDark">The dark color for the widget font.</param>
            <param name="fontLight">The light color for the widget font.</param>
        </member>
        <member name="M:OkuBase.GUI.ColorMap.GetContrastFontColor(OkuBase.Graphics.Color)">
            <summary>
            Gets the font color that has more contrast on
            the given background color.
            </summary>
            <param name="background">The background color of the text.</param>
            <returns>Either the dark or light font color, depending on the given background color.</returns>
        </member>
        <member name="F:OkuBase.GUI.ColorMap.Flash">
            <summary>
            A predefined color map that looks quite like the flash GUI.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.BackGround">
            <summary>
            Gets or sets the color used for clearing the screen.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.WidgetDark">
            <summary>
            Gets the sets the dark color for widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.WidgetLight">
            <summary>
            Gets the sets the light color for widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.HotDark">
            <summary>
            Gets or sets the dark color for hot widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.HotLight">
            <summary>
            Gets or sets the light color for hot widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.ActiveDark">
            <summary>
            Gets or sets the dark color for active widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.ActiveLight">
            <summary>
            Gets or sets the light color for active widgets.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.BorderDark">
            <summary>
            Gets or sets the dark color for widget borders.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.BorderLight">
            <summary>
            Gets or sets the light color for widget borders.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.FontDark">
            <summary>
            Gets or sets the dark color for the widget font.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.FontLight">
            <summary>
            Gets or sets the light color for the widget font.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.WindowDark">
            <summary>
            Gets or set the light color for windows like text boxes.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ColorMap.WindowLight">
            <summary>
            Gets or set the bright color for windows like text boxes.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.HintWidget">
            <summary>
            Defines a widget that shows a hint.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.LabelWidget">
            <summary>
            Defines a widget that simpy displays a text.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.LabelWidget.GetTextMesh">
            <summary>
            Lazyly gets the mesh for the text.
            </summary>
            <returns>The mesh for the text.</returns>
        </member>
        <member name="M:OkuBase.GUI.LabelWidget.Update(System.Single)">
            <summary>
            Updates the label.
            </summary>
            <param name="dt">The time passed since the last frame.</param>
        </member>
        <member name="M:OkuBase.GUI.LabelWidget.Render(OkuBase.GUI.Canvas)">
            <summary>
            Renders the label.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.LabelWidget.Text">
            <summary>
            The text to display. Can be multiline.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.HintWidget.GetFontColor">
            <summary>
            Gets the color of the font.
            </summary>
            <returns>The color of the font.</returns>
        </member>
        <member name="T:OkuBase.GUI.ProgressBarWidget">
            <summary>
            Defines a widget that displays a progress as a bar graph.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.ProgressBarWidget.Render(OkuBase.GUI.Canvas)">
            <summary>
            Renders the progress bar.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ProgressBarWidget.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ProgressBarWidget.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.ProgressBarWidget.Position">
            <summary>
            Gets or sets the current position. Min &lt;= Position &lt;= Max.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.TextBoxWidget">
            <summary>
            Defines a widget that is a single line text box.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.TextBoxWidget.#ctor">
            <summary>
            Creates a new text box widget.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.TextBoxWidget.GetTextMesh">
            <summary>
            Gets the text mesh that can be used to render the text.
            </summary>
            <returns>The text mesh.</returns>
        </member>
        <member name="P:OkuBase.GUI.TextBoxWidget.Text">
            <summary>
            Gets or sets the text that is displayed on the button.
            </summary>
        </member>
        <member name="T:OkuBase.GUI.WidgetContainer">
            <summary>
            Container for GUI widgets that manages updating an rendering widget.
            Every widget has to added to a container to work.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.#ctor">
            <summary>
            Creates a new widget container with the system default font.
            </summary>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.#ctor(OkuBase.Graphics.SpriteFont)">
            <summary>
            Creates a new widget container with the given font.
            </summary>
            <param name="font">The font to use.</param>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.AddWidget(OkuBase.GUI.Widget)">
            <summary>
            Adds the given widget to this container.
            </summary>
            <param name="widget">The widget to add.</param>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.Remove(OkuBase.GUI.Widget)">
            <summary>
            Removes the given widget from this container.
            </summary>
            <param name="widget">The widget to be removed.</param>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.Update(System.Single)">
            <summary>
            Updates the widgets and their states.
            Has to be passed every frame passing the time
            passed since the last frame.
            </summary>
            <param name="dt">The time passed since the last frame.</param>
        </member>
        <member name="M:OkuBase.GUI.WidgetContainer.Render">
            <summary>
            Renders all widget that are in this container.
            The widgets are always rendered in screen space.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.CursorBlinkTime">
            <summary>
            Gets or sets the time that passes between cursor
            states (Visible/Not Visible).
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.Font">
            <summary>
            Gets the font that is used by all widgets
            that are managed by thios container.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.HotWidget">
            <summary>
            Gets the widget that is currently "hot".
            Hot means that the mouse cursor is currently hovering over it.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.ActiveWidget">
            <summary>
            Gets or sets the widget that is currently active.
            A widget is active if the left mouse button was pressed
            down while the widget was hot. The widget stays active
            until the left mouse button is raised.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.FocusedWidget">
            <summary>
            Gets or sets the widget that is currently focused.
            A widget is focused if the left mouse button was pressed 
            down and raised while the widget was hot.
            The focused widget also gets keyboard input forwarded.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.ColorMap">
            <summary>
            Gets or sets the current color map.
            The color map defines the colors that are used to draw
            all widgets that are in this container.
            </summary>
        </member>
        <member name="P:OkuBase.GUI.WidgetContainer.Hint">
            <summary>
            Gets the hint widget.
            </summary>
        </member>
        <member name="T:OkuBase.Input.InputManager">
            <summary>
            Defines a manager that handles input processing and key bindings.
            </summary>
        </member>
        <member name="M:OkuBase.Input.InputManager.#ctor">
            <summary>
            Creates a new input mananger.
            </summary>
        </member>
        <member name="M:OkuBase.Input.InputManager.Update(System.Single)">
            <summary>
            Enqueues any currently active state events,
            </summary>
        </member>
        <member name="T:OkuBase.Input.JoystickInfo">
            <summary>
            Contains the information about one single joystick.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.#ctor(System.UInt32,OkuBase.Platform.JOYCAPS)">
            <summary>
            Creates a new joystick with the given ID and capabilities.
            </summary>
            <param name="id">The joysticks ID.</param>
            <param name="caps">The joysticks capabilities.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.#ctor(System.UInt32,OkuBase.Platform.JOYCAPS,OkuBase.Platform.JOYINFOEX)">
            <summary>
            Creates a new joystick with the given ID and capabilities and initializes it with the given state.
            </summary>
            <param name="id">The joysticks ID.</param>
            <param name="caps">The joysticks capabilities.</param>
            <param name="state">The joysticks current state.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.SetState(OkuBase.Platform.JOYINFOEX)">
            <summary>
            Sets the current state of the joystick.
            </summary>
            <param name="state">The joysticks current state.</param>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsDown(System.Int32,System.UInt32)">
            <summary>
            Checks if the button with the given index is currently pressed or not in the given button state.
            </summary>
            <param name="buttonIndex">The index of the button. Must be in the range 0..NumberOfButtons.</param>
            <param name="buttonState">The button state to get the current state of the button from.</param>
            <returns>True if the button is down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsDown(System.Int32)">
            <summary>
            Checks if the given button is down at the moment.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button is down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonIsHoldDown(System.Int32)">
            <summary>
            Checks if the given button is hold down.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonPressed(System.Int32)">
            <summary>
            Checks if the given button was pressed down since the last frame.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button was pressed down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ButtonRaised(System.Int32)">
            <summary>
            Checks if the given button was raised since the last frame.
            </summary>
            <param name="buttonIndex">The number of the button to check. Must be in the range 0..NumberOfButtons.</param>
            <returns>True if the button was raised, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.JoystickInfo.ToString">
            <summary>
            Creates a string representation of the current joystick state. Should only be used for debugging.
            </summary>
            <returns>A string representation of the current joystick state.</returns>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.ID">
            <summary>
            Gets or sets the joystick ID used to query the joysticks state with the Win-API methods.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.NumberOfButtons">
            <summary>
            Gets the number of buttons of the joystick.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.NumberOfAxis">
            <summary>
            Gets the number of axis ths joystick has.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.X">
            <summary>
            Gets or sets the current X-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.Y">
            <summary>
            Gets or sets the current Y-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.Z">
            <summary>
            Gets or sets the current Z-coordinate in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.R">
            <summary>
            Gets or sets the current position of the rudder or fourth joystick axis in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.U">
            <summary>
            Gets or sets the current fifth axis position in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.V">
            <summary>
            Gets or sets the current sixth axis position in the range 0.0-1.0.
            </summary>
        </member>
        <member name="P:OkuBase.Input.JoystickInfo.PointOfViewAngle">
            <summary>
            Gets or sets the current angle of the point-of-view control. Values for this member are in the range 0 through 359.99. These values represent the angle, in degrees, of each view.
            </summary>
        </member>
        <member name="T:OkuBase.Input.JoystickInput">
            <summary>
            JoystickInput is a list of all joysticks currently connected to the system.
            You should call the <code>Update</code> or <code>UpdateAll</code> method periodically
            in your game loop. These will update the current state of the joysticks.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.#ctor">
            <summary>
            Creates a new JoystickInput. This will also load infos about all joyticks connected to the system.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.Initialize">
            <summary>
            Refreshes all joystick information that is currently stored. 
            This can be used to check if a joystick has been connected/disconnected 
            recently.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.UpdateAll">
            <summary>
            Updates the states of all joysticks. Should be called before accessing the joysticks data.
            </summary>
        </member>
        <member name="M:OkuBase.Input.JoystickInput.Update(System.Int32)">
            <summary>
            Updates the state of a single joystick. Should be called before accessing the joysticks data.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:OkuBase.Input.KeyAction">
            <summary>
            Defines an action that can be done on a key.
            </summary>
        </member>
        <member name="F:OkuBase.Input.KeyAction.Down">
            <summary>
            The button is pressed down.
            </summary>
        </member>
        <member name="F:OkuBase.Input.KeyAction.Up">
            <summary>
            The button is raised up.
            </summary>
        </member>
        <member name="T:OkuBase.Input.KeyboardInput">
            <summary>
            Handles getting input from the keyboard.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.#ctor">
            <summary>
            Creates a new keyboard input.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.Update">
            <summary>
            Updates the state of all keys of the keyboard. This state is used by
            <code>IsDown</code> to check if a key is down or up.
            </summary>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsDown(System.Windows.Forms.Keys,System.Byte[])">
            <summary>
            Checks if the given key is currently pressed down or not. This function always
            uses the keyboard state that was loaded in the last call of the <code>Update</code>
            method.
            </summary>
            <param name="key">The key to check.</param>
            <param name="state">An array that contains the key states.</param>
            <returns>True if the key is pressed down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the given key is pressed down now.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns>True if the key is pressed down right now, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyIsHoldDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the given key is hold down.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns>True if the key is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key was pressed down since the last frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key was pressed, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyRaised(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key was raised since the last frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key was raised, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.GetPressedButtons">
            <summary>
            Gets the buttons that have been pressed down since the last frame.
            </summary>
            <returns>A list of the buttons that have been pressed down.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.GetRaisedButtons">
            <summary>
            Gets the buttons that have been raised up since the last frame.
            </summary>
            <returns>A list of the buttons that have been raised up.</returns>
        </member>
        <member name="M:OkuBase.Input.KeyboardInput.KeyToChar(System.Windows.Forms.Keys)">
            <summary>
            Converts the given virtual key code to an ascii character.
            </summary>
            <param name="key">The virtual key code.</param>
            <returns>The char for the given key code or 0 if the given key has no char.</returns>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.CapsLockActive">
            <summary>
            Gets if the caps lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.ScrollLockActive">
            <summary>
            Gets if the scroll lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="P:OkuBase.Input.KeyboardInput.NumLockActive">
            <summary>
            Gets if the num lock is toggled (indicator light on the keyboard is on) or not.
            </summary>
        </member>
        <member name="T:OkuBase.Input.MouseButton">
            <summary>
            Defines a set of mouse buttons.
            </summary>
        </member>
        <member name="T:OkuBase.Input.MouseInput">
            <summary>
            Handles access to the mouse cursor position and button states.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.#ctor">
            <summary>
            Creates a new mouse input.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.Update">
            <summary>
            Updates the current position and buttons states that are used internally.
            </summary>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsDown(OkuBase.Input.MouseButton,System.Byte[])">
            <summary>
            Check if the given button is down in the given state.
            </summary>
            <param name="button">The button to e checked.</param>
            <param name="state">The button state array.</param>
            <returns>True if the button is down, else False.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsDown(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button is currently pressed down. Returns true as long as the button is pressed down.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button is pressed down right now, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonIsHoldDown(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button is currently hold down, that is it is pressed down now and was also pressed down last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button is hold down, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonPressed(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button was pressed down since the last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button was pressed, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.ButtonRaised(OkuBase.Input.MouseButton)">
            <summary>
            Checks if the given button was raised since the last frame.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the button was raised, else false.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.GetPressedButtons">
            <summary>
            Gets the buttons that have been pressed down since the last frame.
            </summary>
            <returns>A list of the buttons that have been pressed down.</returns>
        </member>
        <member name="M:OkuBase.Input.MouseInput.GetRaisedButtons">
            <summary>
            Gets the buttons that have been raised up since the last frame.
            </summary>
            <returns>A list of the buttons that have been raised up.</returns>
        </member>
        <member name="P:OkuBase.Input.MouseInput.X">
            <summary>
            Gets the absolute vertical coordinate of the mouse cursor in screen space.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.Y">
            <summary>
            Gets the absolute horizontal coordinate of the mouse cursor in screen space.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.RelativeX">
            <summary>
            Gets the change in the vertical coordinate of the mouse cursor in screen space
            since the last call to <code>Update</code>.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.RelativeY">
            <summary>
            Gets the change in the horizontal coordinate of the mouse cursor in screen space
            since the last call to <code>Update</code>.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.WheelDelta">
            <summary>
            Gets the amount of lines the mouse wheel has scrolled.
            </summary>
        </member>
        <member name="P:OkuBase.Input.MouseInput.WheelSpinned">
            <summary>
            Gets if the mouse wheel has been scrolled or not.
            </summary>
        </member>
        <member name="T:OkuBase.Geometry.IntersectionTests">
            <summary>
            Provides a series of intersection tests for various primitives.
            </summary>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.LineSegments(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Checks for intersection of two line segments specified by the given
            coordinates. The line segments are formed like ((x1,y1),(x2,y2)) and 
            ((x3,y3),(x4,y4)).
            </summary>
            <param name="x1">The x component of the first line segments first point.</param>
            <param name="y1">The y component of the first line segments first point.</param>
            <param name="x2">The x component of the first line segments second point.</param>
            <param name="y2">The y component of the first line segments second point.</param>
            <param name="x3">The x component of the second line segments first point.</param>
            <param name="y3">The y component of the second line segments first point.</param>
            <param name="x4">The x component of the second line segments second point.</param>
            <param name="y4">The y component of the second line segments second point.</param>
            <param name="factor">Contains the line formula control value, if there is an intersection.</param>
            <param name="minT">The minimum line formula control value that has to be reached.</param>
            <returns>True if the line segments intersect, otherwise false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.LineSegments(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single@,System.Single)">
            <summary>
            Checks if the line segments defined by [p1,p2] and [p3,p4] intersect.
            </summary>
            <param name="p1">The start of the first line.</param>
            <param name="p2">The end of the first line.</param>
            <param name="p3">The start of the second line.</param>
            <param name="p4">The end of the second line.</param>
            <param name="factor">Contains the line formula control value, if there is an intersection.</param>
            <param name="minT">The minimum line formula control value that has to be reached.</param>
            <returns>True if the line segments intersect, otherwise false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.LineSegmentAABB(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Checks for intersection of a line segment and an axis aligned bounding box. The line segment
            is given by ((x1,y1),(x2,y2)). The bounding box is given by left, right, top and bottom.
            </summary>
            <param name="x1">The x component of the line segments first point.</param>
            <param name="y1">The x component of the line segments first point.</param>
            <param name="x2">The x component of the line segments second point.</param>
            <param name="y2">The x component of the line segments second point.</param>
            <param name="left">The left boundary of the bounding box.</param>
            <param name="right">The right boundary of the bounding box.</param>
            <param name="top">The top boundary of the bounding box.</param>
            <param name="bottom">The bottom boundary of the bounding box.</param>
            <param name="factor">Contains the line formula control value, if there is an intersection.</param>
            <param name="minT">The minimum line formula control value that has to be reached.</param>
            <returns>True if the line segment intersects the bounding box, otherwise false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.Intersect(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f@)">
            <summary>
            Tests intersection of two convex polygons using the separating axis theorem.
            The returned vector is the minimum transaltion distance that can be used to move the 
            two polygons apart.
            </summary>
            <param name="poly1">The first polygon.</param>
            <param name="poly2">The second polygon.</param>
            <param name="mtd">The minimum transaltion distance is returned in this parameter if true is returned.</param>
            <returns>If an intersection is present, true is returned. Else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.GetProjectedBounds(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f[],System.Single@,System.Single@)">
            <summary>
            Projects the location vectors of the given poly to the given axis and returns the
            minimum and maximum of all projections in the out parameters min and max.
            </summary>
            <param name="axis">The axis to project the poly onto.</param>
            <param name="poly">The polygon to be projected. Must have at least one point.</param>
            <param name="min">The minimum projection value is returned in this parameter.</param>
            <param name="max">The maximum projection value is returned in this parameter.</param>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.Rectangles(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the bounding boxes defined by the given vectors are overlapping.
            </summary>
            <param name="min1">The minimum vector of the first bounding box.</param>
            <param name="max1">The maximum vector of the first bounding box.</param>
            <param name="min2">The minimum vector of the second bounding box.</param>
            <param name="max2">The maximum vector of the second bounding box.</param>
            <returns>True if the bounding boxes intersect, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.RayPolygon(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f[],System.Single@)">
            <summary>
            Calculates the closest intersection of the ray defined by start and end with the given 
            polygon.
            </summary>
            <param name="start">The start point of the ray.</param>
            <param name="end">The end point of the ray.</param>
            <param name="polygon">The polygon.</param>
            <param name="mtd">If an intersection is present, the ray control value of the intersection point is returned here.</param>
            <returns>True if the ray intersects the polygon, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.PointInRectangle(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the given point p is inside the axis aligned bounding box
            defined by the two point min and max.
            </summary>
            <param name="p">The point to check.</param>
            <param name="min">The min vector of the AABB.</param>
            <param name="max">The max vector of the AABB.</param>
            <returns>True if the point is inside the AABB, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.PointInRectangle(OkuBase.Geometry.Vector2f,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if the given point is inside of the axis aligned box 
            defined by the points [minX, minY] and [maxX, maxY].
            </summary>
            <param name="p">The point to check.</param>
            <param name="minX">The x value of the min vector.</param>
            <param name="minY">The y value of the min vector.</param>
            <param name="maxX">The x value of the max vector.</param>
            <param name="maxY">The y value of the max vector.</param>
            <returns>True if the point is inside the AABB, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.PointInRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if the given point is inside of the axis aligned box 
            defined by the points [minX, minY] and [maxX, maxY].
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="minX">The x value of the min vector.</param>
            <param name="minY">The y value of the min vector.</param>
            <param name="maxX">The x value of the max vector.</param>
            <param name="maxY">The y value of the max vector.</param>
            <returns>True if the point is inside the AABB, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.Circles(OkuBase.Geometry.Vector2f,System.Single,OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Calculates if the two circle given by the parameters (c1,r1) and (c2,r2) do intersect.
            </summary>
            <param name="c1">The center of the first circle.</param>
            <param name="r1">The radius of the first circle.</param>
            <param name="c2">The center of the first circle.</param>
            <param name="r2">The radius of the first circle.</param>
            <returns>True if the circles intersect, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.Circles(OkuBase.Geometry.Vector2f,System.Single,OkuBase.Geometry.Vector2f,System.Single,OkuBase.Geometry.Vector2f@)">
            <summary>
            Calculates if the two circle given by the parameters (c1,r1) and (c2,r2) do intersect.
            </summary>
            <param name="c1">The center of the first circle.</param>
            <param name="r1">The radius of the first circle.</param>
            <param name="c2">The center of the first circle.</param>
            <param name="r2">The radius of the first circle.</param>
            <param name="mtd">The minimum translation distance is returned here.</param>
            <returns>True if the circles intersect, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.RectContainsCircle(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Checks if the AABB completely contains the given circle.
            </summary>
            <param name="circle">The circle to check.</param>
            <returns>True if the AABB completely contains the given circle, else false.</returns>
        </member>
        <member name="M:OkuBase.Geometry.IntersectionTests.Contains(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Checks if the given rectangle defined by [min1,max1] completly contains the rectangle defined by [min2,max2].
            Also returns true if the AABBs are equal.
            </summary>
            <param name="min1">The minimum point of the first rectangle.</param>
            <param name="max1">The maximum point of the first rectangle.</param>
            <param name="min2">The minimum point of the second rectangle.</param>
            <param name="max2">The maximum point of the second rectangle.</param>
            <returns>True if the given AABB is completly inside of the AABB, else false.</returns>
        </member>
        <member name="T:OkuBase.KeySequence">
            <summary>
            Internal sequence class that is used to generate content ids and 
            other artifical ids.
            </summary>
        </member>
        <member name="T:OkuBase.Logging.Logger">
            <summary>
            Defines a simple logger.
            </summary>
        </member>
        <member name="M:OkuBase.Logging.Logger.AddWriter(OkuBase.Logging.ILogWriter)">
            <summary>
            Adds a new log writer to the logger.
            </summary>
            <param name="writer">The write to be added.</param>
        </member>
        <member name="M:OkuBase.Logging.Logger.RemoveWriter(OkuBase.Logging.ILogWriter)">
            <summary>
            Removes the given log writer from the logger.
            </summary>
            <param name="writer">The writer to be reomved.</param>
            <returns>True if the writer was removed, false if the logger does not contain the writer.</returns>
        </member>
        <member name="M:OkuBase.Logging.Logger.GetCurrentTick">
            <summary>
            Gets the current tick.
            </summary>
            <returns>The current tick.</returns>
        </member>
        <member name="M:OkuBase.Logging.Logger.Log(OkuBase.Logging.LogLevel,System.String)">
            <summary>
            Logs a new log message with the given log level.
            </summary>
            <param name="level">The level of the log message.</param>
            <param name="message">The new log message.</param>
        </member>
        <member name="M:OkuBase.Logging.Logger.LogInfo(System.String)">
            <summary>
            Logs a new message with info log level.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:OkuBase.Logging.Logger.LogWarning(System.String)">
            <summary>
            Logs a new message with warning log level.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:OkuBase.Logging.Logger.LogError(System.String)">
            <summary>
            Logs a new message with error log level.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="P:OkuBase.Logging.Logger.MaxEntries">
            <summary>
            Gets or sets the miximum number of entries the logger stores.
            </summary>
        </member>
        <member name="P:OkuBase.Logging.Logger.Count">
            <summary>
            Gets the number of log entries the logger currently stores.
            This is always &gt;= MaxExntries.
            </summary>
        </member>
        <member name="P:OkuBase.Logging.Logger.Item(System.Int32)">
            <summary>
            Gets the log entry at the given index where 0
            points to the oldest entry.
            </summary>
            <param name="index">The index of the entry.</param>
            <returns>The log entry at the given index.</returns>
        </member>
        <member name="T:OkuBase.Logging.LogLevel">
            <summary>
            Determines the log level of a log message.
            </summary>
        </member>
        <member name="F:OkuBase.Logging.LogLevel.Info">
            <summary>
            Info level for general information.
            </summary>
        </member>
        <member name="F:OkuBase.Logging.LogLevel.Warning">
            <summary>
            Warning level for issues that do not affect the execution of the application.
            </summary>
        </member>
        <member name="F:OkuBase.Logging.LogLevel.Error">
            <summary>
            Error level for issue that keep the application from working correctly.
            </summary>
        </member>
        <member name="T:OkuBase.OkuGame">
            <summary>
            Main game class that runs the whole game.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.#ctor">
            <summary>
            Creates a new game.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Run">
            <summary>
            Runs the game in an infinite loop.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.DoInitialize(OkuBase.Settings.OkuSettings)">
            <summary>
            Triggers the initialization of all engine parts.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Initialize">
            <summary>
            Can be overriden to do custom initialization when the game starts.
            This is called after the renderer, sound engine and config file
            have been already initialized.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.DoUpdate(System.Single)">
            <summary>
            Triggers update of all engine parts and node actions every frame.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:OkuBase.OkuGame.Update(System.Single)">
            <summary>
            Can be overriden to add custom update code. This method is
            called every frame and should be use to update the game scene.
            </summary>
            <param name="dt">The time since the last frame in fractional seconds.</param>
        </member>
        <member name="M:OkuBase.OkuGame.DoRender">
            <summary>
            Trigger the rendering of the whole scene.
            </summary>
        </member>
        <member name="M:OkuBase.OkuGame.Render">
            <summary>
            Can be overriden to add custom rendering code. This method is called every
            frame just after the Update method.
            </summary>
        </member>
        <member name="P:OkuBase.OkuGame.Name">
            <summary>
            Gets or sets the name of the game.
            </summary>
        </member>
        <member name="P:OkuBase.OkuGame.Oku">
            <summary>
            Gets the oku library.
            </summary>
        </member>
        <member name="T:OkuBase.Particles.ParticleEmitter">
            <summary>
            Base class for particle emitters. Do not use directly. Use a descendent of it.
            Override the Emit method in descendents to create different emitter behavior.
            </summary>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.Emit(System.Collections.Generic.List{OkuBase.Particles.Particle},System.Single)">
            <summary>
            Creates new particles and adds them to the list in the particles parameter.
            </summary>
            <param name="particles">The list to emit new particles to.</param>
            <param name="dt">The time that has passed since the last frame.</param>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetRandomAngle">
            <summary>
            Calculates a random angle value taking into account the current configuration.
            </summary>
            <returns>A renadom angle in radians.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetRandomSpeed">
            <summary>
            Calculates a random speed value taking into account the current configuration.
            </summary>
            <returns>A random spped in pixels per second.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetRandomVelocity">
            <summary>
            Calculates a random velocity vector for a new particle taking into account the
            configured angle and speed and the corresponding variations.
            </summary>
            <returns>The direction vector scaled by the speed.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetRandomLifetime">
            <summary>
            Calculates a random lifetime for a new particle taking into account the configured
            lifetime and the corresponding variation.
            </summary>
            <returns>A random lifetime.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetRandomScale">
            <summary>
            Calculates a random scale for a new particle taking into account the configured scale and variation.
            </summary>
            <returns>A random scale value.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.GetNumParticleToEmit(System.Single)">
            <summary>
            Calculates how many particles have to be generated for the given amount of time.
            </summary>
            <param name="dt">The amount of time that has passed since the last frame.</param>
            <returns>The number of particles that have to be created for the given time. Maybe zero.</returns>
        </member>
        <member name="M:OkuBase.Particles.ParticleEmitter.AddParticle(System.Collections.Generic.List{OkuBase.Particles.Particle})">
            <summary>
            Creates a new particle from the configured parameters.
            </summary>
            <returns>The newly created particle.</returns>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.Angle">
            <summary>
            Gets or sets the angle in which the emitter spreads particles in degrees.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.AngleVariation">
            <summary>
            Gets or sets the variation of the emitting angle. Must be in the range 0.0 - 1.0 where 0.0 means no variation and 1.0 means 360°.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.BirthRate">
            <summary>
            Gets or sets the rate at which particles are born. Can be smaller than 1.0 but not negative.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.Lifetime">
            <summary>
            Gets or sets the initial lifetime of the emitted particles in seconds.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.LifetimeVariation">
            <summary>
            Gets or sets the variation of the lifetime of the emitted particles. Ranges from 0.0 to 1.0 where 0.0 means no variation
            and 1.0 means liftime is in range (lifetime +- lifetime).
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.Speed">
            <summary>
            Gets or sets the speed the pixels move at in world units per second.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.SpeedVariation">
            <summary>
            Gets or sets the variation of the speed of new particles. Ranges from 0.0 to 1.0 where 0.0 means no variation and 1.0
            means speed is in range (speed +- speed).
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.Scale">
            <summary>
            Gets or sets the scale of the emitted particles. 1.0 means original size.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.ScaleVariation">
            <summary>
            Gets or sets the variation of the speed of new particles. Ranges from 0.0 to 1.0 where 0.0 means no variation and
            1.0 means scale is in range (scale +- scale).
            </summary>
        </member>
        <member name="P:OkuBase.Particles.ParticleEmitter.Color">
            <summary>
            Gets or sets the color of newly created particles.
            </summary>
        </member>
        <member name="M:OkuBase.Particles.LineEmitter.GetRandomVelocity">
            <summary>
            Calculates a random velocity vector for a new particle taking into account the
            configured angle and speed and the corresponding variations.
            If the NormalDirection property is set to true the normal of the line is used 
            as direction. In this case the angle variation is not supported.
            </summary>
            <returns>The direction vector scaled by the speed.</returns>
        </member>
        <member name="M:OkuBase.Particles.LineEmitter.GetRandomPosition">
            <summary>
            Calculates a random position on the emitter line.
            </summary>
            <returns>A random point on the emitter line.</returns>
        </member>
        <member name="P:OkuBase.Particles.LineEmitter.Start">
            <summary>
            Gets or sets the start point of the emitters line.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.LineEmitter.End">
            <summary>
            Gets or sets the end point of the emitters line.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.LineEmitter.NormalDirection">
            <summary>
            Gets or sets if the normal of the line is used for the initial 
            direction of the particles or the separate angle proeprties.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.Particle.LifetimeRatio">
            <summary>
            Gets the ratio of the lifetime. This value ranges from 0.0 (start of life) - 1.0 (end of life). 
            Can be used for calculating lifetime effects.
            </summary>
        </member>
        <member name="P:OkuBase.Particles.Particle.IsDead">
            <summary>
            Gets if the life of this particle has ended or not.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.User32">
            <summary>
            Wraps functions from user32.dll.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.User32.Point">
            <summary>
            Internal struct to get mouse position.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYINFOEX">
            <summary>
            Contains extended information about the joystick position, point-of-view position, and button state.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwSize">
            <summary>
            Size, in bytes, of this structure. Use System.Runtime.InteropServices.Marshal.SizeOf(...) to initialize this.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwFlags">
            <summary>
            Flags indicating the valid information returned in this structure. Members that do not contain valid information are set to zero.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwRpos">
            <summary>
            Current position of the rudder or fourth joystick axis.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwUpos">
            <summary>
            Current fifth axis position.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwVpos">
            <summary>
            Current sixth axis position.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwButtons">
            <summary>
            Current state of the 32 joystick buttons. The value of this member can be set to any combination of JOY_BUTTON n flags, where n is a value in the range of 1 through 32 corresponding to the button that is pressed.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwButtonNumber">
            <summary>
            Current button number that is pressed.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwPOV">
            <summary>
            Current position of the point-of-view control. Values for this member are in the range 0 through 35,900. These values represent the angle, in degrees, of each view multiplied by 100.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwReserved1">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFOEX.dwReserved2">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYINFO">
            <summary>
            The JOYINFO structure contains information about the joystick position and button state.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYINFO.wButtons">
            <summary>
            Current state of joystick buttons.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.JOYCAPS">
            <summary>
            The JOYCAPS structure contains information about the joystick capabilities.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMid">
            <summary>
            Manufacturer identifier.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPid">
            <summary>
            Product identifier.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szPname">
            <summary>
            Null-terminated string containing the joystick product name.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wXmin">
            <summary>
            Minimum X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wXmax">
            <summary>
            Maximum X-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wYmin">
            <summary>
            Minimum Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wYmax">
            <summary>
            Maximum Y-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wZmin">
            <summary>
            Minimum Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wZmax">
            <summary>
            Maximum Z-coordinate.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wNumButtons">
            <summary>
            Number of joystick buttons.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPeriodMin">
            <summary>
            Smallest polling frequency supported when captured by the joySetCapture function.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wPeriodMax">
            <summary>
            Largest polling frequency supported when captured by joySetCapture.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wRmin">
            <summary>
            Minimum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wRmax">
            <summary>
            Maximum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wUmin">
            <summary>
            Minimum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wUmax">
            <summary>
            Maximum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wVmin">
            <summary>
            Minimum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wVmax">
            <summary>
            Maximum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wCaps">
            <summary>
            Joystick capabilities.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMaxAxes">
            <summary>
            Maximum number of axes supported by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wNumAxes">
            <summary>
            Number of axes currently in use by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.wMaxButtons">
            <summary>
            Maximum number of buttons supported by the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szRegKey">
            <summary>
            Null-terminated string containing the registry key for the joystick.
            </summary>
        </member>
        <member name="F:OkuBase.Platform.JOYCAPS.szOEMVxD">
            <summary>
            Null-terminated string identifying the joystick driver OEM.
            </summary>
        </member>
        <member name="T:OkuBase.Platform.Winmm">
            <summary>
            Wrapper class for the Winmm.dll. Currently only most common joystick functions are supported.
            </summary>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetNumDevs">
            <summary>
            The joyGetNumDevs function queries the joystick driver for the number of joysticks it supports.
            </summary>
            <remarks>Use the joyGetPos function to determine whether a given joystick is physically attached to the system. If the specified joystick is not connected, joyGetPos returns a JOYERR_UNPLUGGED error value.</remarks>
            <returns>The joyGetNumDevs function returns the number of joysticks supported by the current driver or zero if no driver is installed.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetPos(System.UInt32,OkuBase.Platform.JOYINFO@)">
            <summary>
            The joyGetPos function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to JOYSTICKID1 and JOYSTICKID2.</param>
            <param name="joyInfo">Pointer to a JOYINFO structure that contains the position and button status of the joystick.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM, JOYERR_UNPLUGGED.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetPosEx(System.UInt32,OkuBase.Platform.JOYINFOEX@)">
            <summary>
            The joyGetPosEx function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to JOYSTICKID1 and JOYSTICKID2.</param>
            <param name="joyInfo">Pointer to a JOYINFOEX structure that contains extended position information and button status of the joystick. You must set the dwSize and dwFlags members or joyGetPosEx will fail. The information returned from joyGetPosEx depends on the flags you specify in dwFlags.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM, MMSYSERR_BADDEVICEID, JOYERR_UNPLUGGED, JOYERR_PARMS.</returns>
        </member>
        <member name="M:OkuBase.Platform.Winmm.joyGetDevCaps(System.UInt32,OkuBase.Platform.JOYCAPS@,System.UInt32)">
            <summary>
            The joyGetDevCaps function queries a joystick to determine its capabilities.
            </summary>
            <param name="joyID">Identifier of the joystick to be queried. Valid values for uJoyID range from -1 to 15. A value of -1 enables retrieval of the szRegKey member of the JOYCAPS structure whether a device is present or not. For Windows NT 4.0, valid values are limited to zero (JOYSTICKID1) and JOYSTICKID2.</param>
            <param name="joyCaps">Pointer to a JOYCAPS structure to contain the capabilities of the joystick.</param>
            <param name="size">Size, in bytes, of the JOYCAPS structure.</param>
            <returns>Returns JOYERR_NOERROR if successful or one of the following error values: MMSYSERR_NODRIVER, MMSYSERR_INVALPARAM.</returns>
        </member>
        <member name="T:OkuBase.Timer.Interval">
            <summary>
            Defines an Interval.
            </summary>
        </member>
        <member name="T:OkuBase.Timer.ITimer">
            <summary>
            Interface for timers.
            </summary>
        </member>
        <member name="M:OkuBase.Timer.ITimer.Update(System.Single)">
            <summary>
            Returns true if the timer wishes to be cleared and never be called again.
            </summary>
            <param name="dt">The time in seconds that passed since th last frame.</param>
            <returns>True if the timer wishes to be cleared and never be called again, else false.</returns>
        </member>
        <member name="P:OkuBase.Timer.ITimer.Id">
            <summary>
            Gets the id of the timer.
            </summary>
        </member>
        <member name="M:OkuBase.Timer.Interval.#ctor(System.Int32,System.Single,OkuBase.Timer.TimerEventDelegate,System.Object)">
            <summary>
            Creates a new interval with the given paramters.
            </summary>
            <param name="id">The id of the new interval.</param>
            <param name="millis">The number of millis seconds that should pass between the intervals.</param>
            <param name="onTimer">The delegate that will be colled on every interval.</param>
            <param name="data">User definable data that is passed to the delegate.</param>
        </member>
        <member name="M:OkuBase.Timer.Interval.Update(System.Single)">
            <summary>
            Updates the intervals internal counter and fires the specified delegate
            if the given number of millis has passed.
            </summary>
            <param name="dt">The number of seconds passed since the last frame.</param>
            <returns>Always false as intervals must be cleared manually.</returns>
        </member>
        <member name="P:OkuBase.Timer.Interval.Id">
            <summary>
            Gets or sets the of the interval.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Interval.Millis">
            <summary>
            Gets or sets the milli seconds between the intervals.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Interval.CurrentMillis">
            <summary>
            Gets the milli seconds that are left until the next interval is triggered.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Interval.OnTimerEvent">
            <summary>
            Gets or sets the delegate that is called at each interval.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Interval.Data">
            <summary>
            Gets or sets the user data for this interval.
            </summary>
        </member>
        <member name="T:OkuBase.Timer.Timer">
            <summary>
            Defines an timer. A timer only fires once and is automatically cleared.
            </summary>
        </member>
        <member name="M:OkuBase.Timer.Timer.#ctor(System.Int32,System.Single,OkuBase.Timer.TimerEventDelegate,System.Object)">
            <summary>
            Creates a new timer with the given paramters.
            </summary>
            <param name="id">The id of the new timer.</param>
            <param name="millis">The number of millis seconds that should pass between the timers.</param>
            <param name="onTimer">The delegate that will be colled on every timer.</param>
            <param name="data">User definable data that is passed to the delegate.</param>
        </member>
        <member name="M:OkuBase.Timer.Timer.Update(System.Single)">
            <summary>
            Updates the timers internal counter and fires the specified delegate
            if the given number of millis has passed.
            </summary>
            <param name="dt">The number of seconds passed since the last frame.</param>
            <returns>True if the delegate was triggered, else false.</returns>
        </member>
        <member name="P:OkuBase.Timer.Timer.Id">
            <summary>
            Gets or sets the of the timer.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Timer.Millis">
            <summary>
            Gets or sets the milli seconds between the timers.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Timer.OnTimerEvent">
            <summary>
            Gets or sets the delegate that is called at each timer.
            </summary>
        </member>
        <member name="P:OkuBase.Timer.Timer.Data">
            <summary>
            Gets or sets the user data for this timer.
            </summary>
        </member>
        <member name="T:OkuBase.Timer.TimerEventDelegate">
            <summary>
            A delegate for timers and intervals.
            </summary>
            <param name="id">The id of the timer or interval that triggered this event.</param>
            <param name="data">The user data that was passed when the interval was created.</param>
        </member>
        <member name="T:OkuBase.Timer.TimerManager">
            <summary>
            Defines a manager for timers and intervals.
            </summary>
        </member>
        <member name="M:OkuBase.Timer.TimerManager.SetInterval(System.Int32,OkuBase.Timer.TimerEventDelegate)">
            <summary>
            Creates a new interval with the given milli seconds and delegate and no user data.
            </summary>
            <param name="millis">The number of milli seconds to pass between the delegate calls.</param>
            <param name="onTimer">The delegate to be called at each interval.</param>
            <returns>The id of the new interval. Remeber this to be able to stop interval later usiong the Clearinterval function.</returns>
        </member>
        <member name="M:OkuBase.Timer.TimerManager.SetInterval(System.Int32,OkuBase.Timer.TimerEventDelegate,System.Object)">
            <summary>
            Creates a new interval with the given milli seconds, delegate and user data.
            </summary>
            <param name="millis">The number of milli seconds to pass between the delegate calls.</param>
            <param name="onTimer">The delegate to be called at each interval.</param>
            <param name="data">The user data to be passed to the delegate.</param>
            <returns>The id of the new interval. Remeber this to be able to stop interval later usiong the Clearinterval function.</returns>
        </member>
        <member name="M:OkuBase.Timer.TimerManager.SetTimer(System.Int32,OkuBase.Timer.TimerEventDelegate)">
            <summary>
            Creates a new timer with the given millis and delegate.
            </summary>
            <param name="millis">The number milli seconds to pass until the delegate is triggered.</param>
            <param name="onTimer">The delegate to be called after the given milli seconds passed.</param>
        </member>
        <member name="M:OkuBase.Timer.TimerManager.SetTimer(System.Int32,OkuBase.Timer.TimerEventDelegate,System.Object)">
            <summary>
            Creates a new timer with the given millis, delegate and user data.
            </summary>
            <param name="millis">The number milli seconds to pass until the delegate is triggered.</param>
            <param name="onTimer">The delegate to be called after the given milli seconds passed.</param>
            <param name="data">The user data to be passed to the delegate.</param>
        </member>
        <member name="M:OkuBase.Timer.TimerManager.ClearInterval(System.Int32)">
            <summary>
            Clears the interval with the given id. After this is called, the interval will never be called again.
            </summary>
            <param name="id">The id of the interval to remove.</param>
            <returns>True if the interval was cleared, false if the id was not correct.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.FloatToString(System.Single)">
            <summary>
            Converts the given float value to a string. The decimal separator will always be ".".
            </summary>
            <param name="value">The float to be converted.</param>
            <returns>The string represenation of the given float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.StrToFloat(System.String)">
            <summary>
            Converts the given string to a float value. The decimal separator has to be a ".".
            </summary>
            <param name="str">The string to be converted to a float.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.TryStrToFloat(System.String,System.Single@)">
            <summary>
            Converts the given string to a float value. The decimal separator has to be a ".".
            </summary>
            <param name="str">The string to be converted to a float.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseVectors(System.String)">
            <summary>
            Converts the given string to a vector array.
            The string is expected to be in the format that
            is created by VectorsToStr.
            </summary>
            <param name="str">The string with the vectors.</param>
            <returns>A vector array with all vectors.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseColors(System.String)">
            <summary>
            Converts the given string to a color array.
            The string is expected to be in the format that
            is created by ColorsToStr.
            </summary>
            <param name="str">The string with the colors.</param>
            <returns>A color array with all colors.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.ParseEnum``1(System.String)">
            <summary>
            Parses the given string into a value of the generic
            type which must be an enum. Unfiortunatelly, this cannot
            be forced through generic contraints.
            </summary>
            <typeparam name="T">The enum type to parse to.</typeparam>
            <param name="str">The string to parse.</param>
            <returns>The parsed enum value or default(T) if no member was found.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.TryParseEnum``1(System.String,``0@)">
            <summary>
            Tries to parse the given string into a member of the given enum type.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <param name="result">If true is returned, the parsed enum member is returned here.</param>
            <returns>True if the string was parsed successful, else false.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.StrToBool(System.String,System.Boolean)">
            <summary>
            Converts the given string to a boolean value.
            "yes" is converted to true and "no" is converted to false.
            If the string is neither "yes" nor "no", defaultIfNull is returned.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="defaultIfNull">The default value to return when the string cannot be converted to boolean.</param>
            <returns>True if the given string is "yes", false if it is "no" or defaultIfNull if it could bot be converted.</returns>
        </member>
        <member name="M:OkuBase.Utils.Converter.BoolToStr(System.Boolean)">
            <summary>
            Convert the given boolean value to a string.
            True is converted "yes" and false is converted to "no".
            </summary>
            <param name="value">The boolean value.</param>
            <returns>"yes" if true is given, else "no".</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.RandomFloat(System.Random)">
            <summary>
            Calculates a random float value in the range [-1.0,+1.0].
            </summary>
            <param name="rand">The random number generator to use.</param>
            <returns>A random float value in the range [-1.0,+1.0].</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ToOkuString(OkuBase.Geometry.Vector2f[])">
            <summary>
            Converts the vector array to a string.
            </summary>
            <param name="vectors">The vector array to be converted.</param>
            <returns>The string representation of the vector array.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ToOkuString(OkuBase.Graphics.Color[])">
            <summary>
            Converts the color array to a string.
            </summary>
            <param name="colors">The color array to convert.</param>
            <returns>A string representation of the color array.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.ClosestPoint(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f,System.Single@)">
            <summary>
            Calculates the point in the array that is closest to the given point.
            </summary>
            <param name="vectors">The array of vectors.</param>
            <param name="point">The point to find the closest point for.</param>
            <param name="distance">The distance is of the closest point is returned here.</param>
            <returns>The index of the closest point. -1 if vectors does not contain any points.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingBox(OkuBase.Geometry.Vector2f[])">
            <summary>
            Calculates the axis aligned bounding box of the vector array.
            </summary>
            <param name="vectors">The vectors to calculate the AABB for.</param>
            <returns>The AABB of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetCenter(OkuBase.Geometry.Vector2f[])">
            <summary>
            Calculates the arithmetic center of the points in the vector array.
            </summary>
            <param name="vectors">The vectors to get the center for.</param>
            <returns>The arithmetic center of the points.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingCircleRadius(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the radius of the bounding circle of the vectors with the given center.
            </summary>
            <param name="vectors">The vectors calculate to get the circle for.</param>
            <param name="center">The center of the calculated circle.</param>
            <returns>The radius of the bounding circle of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetBoundingCircleRadiusCentered(OkuBase.Geometry.Vector2f[])">
            <summary>
            Calculates the radius of the bounding circle using the arithmetic center of the vectors.
            </summary>
            <param name="vectors">The vectors to calculate the bounding circle for.</param>
            <returns>The radius of the bounding circle of the vectors.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetAttributeValue(System.Xml.XmlAttributeCollection,System.String,System.String)">
            <summary>
            Gets the value of the attribute with the given name.
            If there is no attribute with the given name, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The value of the attribute, or the given default value if there is 
            no attribute with the given name.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetFloat(System.Xml.XmlAttributeCollection,System.String,System.Single)">
            <summary>
            Gets the attribute with the given name in float format.
            If there is no attribute with the given name or its value cannot be
            converted to a float, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The float value of the attribute, or the given default value if there is 
            no attribute with the given name or its value cannot be converted to a float.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetInt(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            Gets the attribute with the given name in int format.
            If there is no attribute with the given name or its value cannot be
            converted to a int, the given default is returned.
            </summary>
            <param name="attributes">The attributes to search in.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultIfNull">The default value.</param>
            <returns>The int value of the attribute, or the given default value if there is 
            no attribute with the given name or its value cannot be converted to a int.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PopFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the item at index 0 and returns it.
            </summary>
            <typeparam name="T">The type if the list.</typeparam>
            <param name="list">The list to change.</param>
            <returns>The item at index 0.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PopLast``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the item at the end of the list and returns it.
            </summary>
            <typeparam name="T">The type if the list.</typeparam>
            <param name="list">The list to change.</param>
            <returns>The item at the end of the list.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetTagValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value between the opening and the closing tag.
            </summary>
            <param name="node">The node to read from.</param>
            <param name="name">The name of the child tag to read the value from.</param>
            <returns>The value of the tag or null if there is no such tag.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetPath(System.Xml.XmlNode)">
            <summary>
            Gets the dotted path of the given XML node as a string.
            The name of the node itself is included.
            </summary>
            <param name="node">The node the get the path for.</param>
            <returns>The dotted path of the given node.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.WriteValueTag(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes and openening tag, a value and a closing tag in one step.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="name">The of the tag to write.</param>
            <param name="value">The value to write into the tag.</param>
        </member>
        <member name="M:OkuBase.OkuExtensions.GetDelegateType(System.Reflection.MethodInfo)">
            <summary>
            Gets the delegate type of the method which can be used to create a 
            delegate for it at runtime.
            </summary>
            <param name="method">The method.</param>
            <returns>The delegate type of the method, or null if it could not be found.</returns>
        </member>
        <member name="M:OkuBase.OkuExtensions.PolygonIsClockwise(OkuBase.Geometry.Vector2f[])">
            <summary>
            Checks if the polygon is clockwise or counter-clockwise.
            </summary>
            <returns>True if the polygon is clockwise, else false.</returns>
        </member>
        <member name="T:OkuBase.Utils.OkuMath">
            <summary>
            Defines a set of math functions that are used by the engine.
            </summary>
        </member>
        <member name="F:OkuBase.Utils.OkuMath.OneDegreeInRadians">
            <summary>
            The radian value of one degree.
            </summary>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetNormal(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the left hand normal of a line segment defined by start and end.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <returns>The normalized left hand normal.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetNormal(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the left hand normal of a line segment defined by the given coordinates.
            </summary>
            <param name="x1">The x coordinate of the start point.</param>
            <param name="y1">The y coordinate of the start point.</param>
            <param name="x2">The x coordinate of the end point.</param>
            <param name="y2">The y coordinate of the end point.</param>
            <returns>The normalized left hand normal.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetNormals(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f[],System.Int32)">
            <summary>
            Calculates the normals for a closed polygon shape. The normals are written to
            the given normals array starting at the given start index.
            </summary>
            <param name="polygon">The points of the polygon.</param>
            <param name="normals">The normals array the results are written to.</param>
            <param name="start">The start index in the normals array where the normals are written to.</param>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.InterpolateLinear(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,System.Single)">
            <summary>
            Interpolates linearly between the two given points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <param name="t">A value in the range 0.0 - 1.0 where 0.0 means start and 1.0 means end.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.InterpolateLinear(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates linearly between the two given values.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="t">A value in the range 0.0 - 1.0 where 0.0 means start and 1.0 means end.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.InterpolateLinear(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates linearly between the two given values.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="t">A value in the range 0.0 - 1.0 where 0.0 means start and 1.0 means end.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.InterpolateCosine(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between a and b using cosine interpolation. m controls the amount of interpolation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="m">The control paramters.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.InterpolateCubic(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolates a value between y1 and y2 taking into account y0 and y3.
            </summary>
            <param name="y0">The first value.</param>
            <param name="y1">The second value.</param>
            <param name="y2">The third value.</param>
            <param name="y3">The fourth value.</param>
            <param name="m">The control paramter.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.Ceiling(System.Single)">
            <summary>
            Gets the next integer value above the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>The next integer value above the given value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.Floor(System.Single)">
            <summary>
            Gets the next integer value &lt;= the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>The next integer value &lt;= the given value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.BoundingBox(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f@,OkuBase.Geometry.Vector2f@)">
            <summary>
            Calculates the bouding box for the given polygon. If the polygon does not change
            the bounding box should not be recalculated everytime it is needed. Cache it.
            </summary>
            <param name="polygon">The polygon to get the bounding box for.</param>
            <param name="min">Returns the minimum vector of the bounding box.</param>
            <param name="max">Returns the maximum vector of the bounding box.</param>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetSweptAABB(OkuBase.Geometry.Vector2f@,OkuBase.Geometry.Vector2f@,OkuBase.Geometry.Vector2f)">
            <summary>
            Gets the swept AABB of the AABB defined by min and max if it was translated
            by the given translation vector.
            </summary>
            <param name="min">The minimum vector of the AABB. The result is also returned here.</param>
            <param name="max">The maximum vector of the AABB. The result is also returned here.</param>
            <param name="translation">The translation of the AABB.</param>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the given value to the given min and max values.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The allowed minimum value.</param>
            <param name="max">The allowed maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the given value to the given min and max values.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The allowed minimum value.</param>
            <param name="max">The allowed maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetCenter(OkuBase.Geometry.Vector2f[])">
            <summary>
            Calculates the center of the given polygon.
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.CenterOrigin(OkuBase.Geometry.Vector2f[])">
            <summary>
            Recalculates the given polygon or point cloud so that all
            vertices positions are realtive to the center of the polygon.
            </summary>
            <param name="polygon">The polygon to center.</param>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.CenterAt(OkuBase.Geometry.Vector2f[],OkuBase.Geometry.Vector2f)">
            <summary>
            Center the given polygon vertices at the given center.
            That means that all vertices are now relative to the
            given center.
            </summary>
            <param name="polygon">The polygon to be centered.</param>
            <param name="center">The new center of the polygon.</param>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.SignedCeiling(System.Single)">
            <summary>
            Signed ceiling function. If the value is positive, it
            acts just like the normal ceiling. If the value is negative,
            the next smaller value is returned, so -1.5 returns -2 instead
            of -1.
            </summary>
            <param name="value">The value to process.</param>
            <returns>The ceiling of the given value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.SignedFloor(System.Single)">
            <summary>
            Signed floor function. If the value is positive, it
            acts just like the normal floor. If the value is negative,
            the next bigger value is returned, so -1.5 returns -1 instead
            of -2.
            </summary>
            <param name="value">The value to process.</param>
            <returns>The ceiling of the given value.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.ClosestPointOnRect(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the point on the perimeter of the aabb theat is closest to the given point.
            </summary>
            <param name="p">The point.</param>
            <returns>The point on the perimeter that is closest to p.</returns>
        </member>
        <member name="M:OkuBase.Utils.OkuMath.GetRectCenter(OkuBase.Geometry.Vector2f,OkuBase.Geometry.Vector2f)">
            <summary>
            Calculates the center of the rectangle.
            </summary>
            <returns>The center point of the rectangle.</returns>
        </member>
    </members>
</doc>
